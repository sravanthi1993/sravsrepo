{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\samanchi\\\\Desktop\\\\React\\\\sravsrepo\\\\projections\\\\src\\\\Components\\\\Projects.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { If, Else, Elif } from 'rc-if-else';\nimport { Label, Link, PrimaryButton, List } from 'office-ui-fabric-react';\nimport { DetailsList, DetailsListLayoutMode, SelectionMode, Selection, IColumn } from 'office-ui-fabric-react/lib/DetailsList';\n\nfunction Projects(props) {\n  _s();\n\n  const [resourceDetails, setResourceDetails] = useState([]);\n  const [items, setItems] = useState([]);\n  const [state, setState] = useState({\n    projectID: \"\",\n    projectName: \"\",\n    description: \"\",\n    startDate: new Date(),\n    endDate: new Date(),\n    resources: [],\n    shouldShowProjections: false,\n    totalBill: 0,\n    poStatus: \"active\",\n    poValue: \"\",\n    poNum: \"\",\n    origPoNum: \"\",\n    poType: \"sow\",\n    projType: \"t&m\",\n    salesSegment: \"\",\n    cluster: \"\",\n    clientPartner: \"\",\n    accountManager: \"\",\n    cdmName: \"\"\n  });\n  const [projDetailsVisible, setprojDetailsVisible] = useState(false);\n\n  function showProjections() {\n    //const url = \"http://localhost:7071/api/search\";\n    const url = \"https://projectionsazurefunctions.azurewebsites.net/api/GetHolidays?code=IGZG4SdEVqbHWYhV32asIb8junLY3IttJDVB4KjCjL3aNGyr0L1rOg==\";\n    fetch(url, {\n      method: \"GET\"\n    }).then(response => response.json()).then(holidays => {\n      console.log(holidays);\n      holidays.map(holiday => {\n        listofholidays.push(new Date(Date.parse(holiday.holidayDate)));\n      });\n      console.log(listofholidays);\n      var total = 0;\n      var billDetails = [];\n      var billMap = new Map();\n      state.resources.map(res => {\n        var billing = res.billing; // var a = new Date(res.resourceProjStartDate);\n        //var b = state.endDate;\n\n        var start = new Date(res.resourceProjStartDate);\n        var end = new Date(start.getFullYear(), start.getMonth() + 1, 0);\n        console.log(start + \" - \" + end + \" - \" + billing);\n        end = end > state.endDate ? state.endDate : end;\n        var year = start.getFullYear();\n\n        while (end >= start) {\n          var diffDays = computeWorkingDaysBetweenTwoDays(start, end);\n          total += billing * diffDays;\n          var key = monthNames[start.getMonth()] + \" \" + start.getFullYear();\n          console.log(key + \"-\" + billMap.get(key));\n\n          if (!billMap.has(key)) {\n            billMap.set(key, 0);\n          }\n\n          billMap.set(key, billMap.get(key) + billing * diffDays);\n          var month = start.getMonth() == 11 ? -1 : start.getMonth();\n          year = start.getMonth() == 11 ? year + 1 : year;\n          start = new Date(year, month + 1, 1);\n          end = new Date(year, start.getMonth() + 1, 0);\n          end = end >= state.endDate ? state.endDate : end;\n          console.log(start + \" - \" + end + \" - \" + billing);\n        }\n      });\n      setState(prevstate => {\n        return { ...prevstate,\n          totalBill: total,\n          shouldShowProjections: true\n        };\n      });\n\n      for (const [key, value] of billMap) {\n        billDetails.push({\n          \"Month\": key,\n          \"Monthly Bill\": \"$\" + value\n        });\n        console.log(`${key}: ${value}`);\n      } //   billMap.map(monthlyBill => {\n      //       billDetails.push(\n      //           {\n      //               \"Month\": monthlyBill,\n      //               \"Monthly Bill\": \"$\" + (billing * diffDays)\n      //           },\n      //       )\n      //   })\n\n\n      setBillingDetails(billDetails);\n    });\n  }\n\n  function setCurrentProject(e) {\n    var project = props.projectlist[e.target.name];\n    setprojDetailsVisible(true);\n    setState(prevstate => {\n      return { ...prevstate,\n        shouldShowProjections: false,\n        projectName: project.projectName,\n        startDate: new Date(Date.parse(project.startDate)),\n        endDate: new Date(Date.parse(project.endDate)),\n        description: project.description,\n        resources: project.resources,\n        poStatus: project.poStatus == 0 ? \"Active\" : \"Inactive\",\n        poValue: project.poValue,\n        poType: project.poType == 0 ? \"SOW\" : \"Beeline\",\n        projType: project.projectType == 0 ? \"T&M\" : \"Fixed Price\",\n        poNum: project.poNumber,\n        origPoNum: project.orginalPoNumber,\n        salesSegment: project.salesSegment,\n        cluster: project.cluster,\n        clientPartner: project.clientPartner,\n        accountManager: project.accountManager,\n        cdmName: project.cdmName,\n        projDetailsVisible: true\n      };\n    });\n  }\n\n  function UpdateItems() {\n    setItems([{\n      \"Field\": \"PO Number\",\n      \"Value\": state.poNum\n    }, {\n      \"Field\": \"Name\",\n      \"Value\": state.projectName\n    }, {\n      \"Field\": \"Description\",\n      \"Value\": state.description\n    }, {\n      \"Field\": \"Start Date\",\n      \"Value\": state.startDate.toString()\n    }, {\n      \"Field\": \"End Date\",\n      \"Value\": state.endDate.toString()\n    }, {\n      \"Field\": \"Original PO Number\",\n      \"Value\": state.origPoNum\n    }, {\n      \"Field\": \"PO Current Status\",\n      \"Value\": state.poStatus\n    }, {\n      \"Field\": \"PO Value\",\n      \"Value\": state.poValue\n    }, {\n      \"Field\": \"PO Type\",\n      \"Value\": state.poType\n    }, {\n      \"Field\": \"Project Type\",\n      \"Value\": state.projType\n    }, {\n      \"Field\": \"Sales Segment\",\n      \"Value\": state.salesSegment\n    }, {\n      \"Field\": \"Cluster \",\n      \"Value\": state.cluster\n    }, {\n      \"Field\": \"Client Partner(L1)\",\n      \"Value\": state.clientPartner\n    }, {\n      \"Field\": \"Account Manager(L2)\",\n      \"Value\": state.accountManager\n    }, {\n      \"Field\": \"CDM Name\",\n      \"Value\": state.cdmName\n    }]);\n    var resDetails = [];\n    state.resources.map(res => {\n      resDetails.push({\n        \"ResourceName\": res.resourceName,\n        \"Billing (/day)\": res.billing\n      });\n    });\n    setResourceDetails(resDetails);\n  }\n\n  React.useEffect(() => {\n    UpdateItems();\n  }, [state]); //setprojlist(props.projectlist);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"ProjectsList\",\n      children: \" Projects List \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this), props.projectlist.map((proj, index) => {\n      console.log(proj.projectName);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          onClick: setCurrentProject,\n          name: index,\n          children: [proj.projectName, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 29\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 103\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 24\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(If, {\n      condition: projDetailsVisible,\n      children: [/*#__PURE__*/_jsxDEV(DetailsList, {\n        items: items,\n        setKey: \"set\",\n        layoutMode: DetailsListLayoutMode.justified,\n        selectionMode: SelectionMode.none\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(If, {\n        condition: state.resources.length > 0,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \" Resources \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DetailsList, {\n          items: resourceDetails,\n          setKey: \"set\",\n          layoutMode: DetailsListLayoutMode.justified,\n          selectionMode: SelectionMode.none\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PrimaryButton, {\n          id: \"Projections\",\n          onClick: showProjections,\n          children: \"Show Projection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(If, {\n        condition: state.resources.length == 0,\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \" No resources assigned to the project as of now. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(If, {\n      condition: state.shouldShowProjections,\n      children: [/*#__PURE__*/_jsxDEV(DetailsList, {\n        items: billingDetails,\n        setKey: \"set\",\n        layoutMode: DetailsListLayoutMode.justified,\n        selectionMode: SelectionMode.none\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\" Total Bill - $\", state.totalBill]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Projects, \"sSKrodQ8+4WxZ/BuSyQPxko9BEg=\");\n\n_c = Projects;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["C:/Users/samanchi/Desktop/React/sravsrepo/projections/src/Components/Projects.js"],"names":["React","useState","If","Else","Elif","Label","Link","PrimaryButton","List","DetailsList","DetailsListLayoutMode","SelectionMode","Selection","IColumn","Projects","props","resourceDetails","setResourceDetails","items","setItems","state","setState","projectID","projectName","description","startDate","Date","endDate","resources","shouldShowProjections","totalBill","poStatus","poValue","poNum","origPoNum","poType","projType","salesSegment","cluster","clientPartner","accountManager","cdmName","projDetailsVisible","setprojDetailsVisible","showProjections","url","fetch","method","then","response","json","holidays","console","log","map","holiday","listofholidays","push","parse","holidayDate","total","billDetails","billMap","Map","res","billing","start","resourceProjStartDate","end","getFullYear","getMonth","year","diffDays","computeWorkingDaysBetweenTwoDays","key","monthNames","get","has","set","month","prevstate","value","setBillingDetails","setCurrentProject","e","project","projectlist","target","name","projectType","poNumber","orginalPoNumber","UpdateItems","toString","resDetails","resourceName","useEffect","proj","index","justified","none","length","billingDetails"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { If, Else, Elif } from 'rc-if-else';\r\nimport { Label, Link, PrimaryButton, List } from 'office-ui-fabric-react';\r\nimport { DetailsList, DetailsListLayoutMode, SelectionMode, Selection, IColumn } from 'office-ui-fabric-react/lib/DetailsList';\r\n\r\nfunction Projects(props) {\r\n\r\n    const [resourceDetails, setResourceDetails ] = useState([]);\r\n    const [items, setItems] = useState([]);\r\n    const [state, setState] = useState({\r\n        projectID: \"\",\r\n        projectName: \"\",\r\n        description: \"\",\r\n        startDate: new Date(),\r\n        endDate: new Date(),\r\n        resources: [],\r\n        shouldShowProjections: false,\r\n        totalBill: 0,\r\n        poStatus: \"active\",\r\n        poValue: \"\",\r\n        poNum: \"\",\r\n        origPoNum: \"\",\r\n        poType: \"sow\",\r\n        projType: \"t&m\",\r\n        salesSegment: \"\",\r\n        cluster: \"\",\r\n        clientPartner: \"\",\r\n        accountManager: \"\",\r\n        cdmName: \"\"\r\n    });\r\n\r\n    const [projDetailsVisible, setprojDetailsVisible] = useState(false);\r\n\r\n    function showProjections() {\r\n          \r\n        //const url = \"http://localhost:7071/api/search\";\r\n        const url = \"https://projectionsazurefunctions.azurewebsites.net/api/GetHolidays?code=IGZG4SdEVqbHWYhV32asIb8junLY3IttJDVB4KjCjL3aNGyr0L1rOg==\"\r\n        fetch(url, {\r\n            method : \"GET\"\r\n          }).then(response => response.json()\r\n          ).then(holidays => {\r\n              console.log(holidays);\r\n              holidays.map(holiday =>  \r\n                {\r\n                    listofholidays.push(new Date(Date.parse(holiday.holidayDate)))\r\n                });\r\n              console.log(listofholidays)\r\n\r\n              var total = 0;\r\n              var billDetails = [];\r\n              var billMap = new Map();\r\n\r\n              state.resources.map(res => {\r\n\r\n                var billing = res.billing\r\n                 // var a = new Date(res.resourceProjStartDate);\r\n                  //var b = state.endDate;\r\n                  var start = new Date(res.resourceProjStartDate);\r\n                  var end = new Date(start.getFullYear(), start.getMonth() + 1, 0);\r\n                  console.log(start + \" - \" + end + \" - \" + billing)\r\n                  end = (end > state.endDate) ? state.endDate : end;\r\n                  var year = start.getFullYear();\r\n                  while (end >= start) {\r\n                      var diffDays = computeWorkingDaysBetweenTwoDays(start, end);\r\n                      total += billing * diffDays;\r\n\r\n                      var key = monthNames[start.getMonth()] + \" \" + start.getFullYear();\r\n                      console.log(key + \"-\" + billMap.get(key));\r\n                      if(!billMap.has(key))\r\n                      {\r\n                        billMap.set(key, 0);\r\n                      }\r\n                      billMap.set(key, billMap.get(key) + (billing * diffDays));\r\n                      \r\n\r\n                      var month = start.getMonth() == 11 ? -1 : start.getMonth();\r\n                      year = start.getMonth() == 11 ? year + 1 : year;\r\n                      start = new Date(year, month + 1, 1);\r\n                      end = new Date(year, start.getMonth() + 1, 0);\r\n                      end = (end >= state.endDate) ? state.endDate : end;\r\n                      console.log(start + \" - \" + end + \" - \" + billing)\r\n                  }\r\n              })\r\n\r\n      \r\n             setState(prevstate => {\r\n                  return{...prevstate,totalBill : total,\r\n                      shouldShowProjections: true,}\r\n                  \r\n              })\r\n              \r\n              for (const [key, value] of billMap) {\r\n                billDetails.push(\r\n                    {\r\n                        \"Month\": key,\r\n                        \"Monthly Bill\": \"$\" + value\r\n                    },\r\n                )\r\n                console.log(`${key}: ${value}`);\r\n              }\r\n\r\n             \r\n            //   billMap.map(monthlyBill => {\r\n            //       billDetails.push(\r\n            //           {\r\n            //               \"Month\": monthlyBill,\r\n            //               \"Monthly Bill\": \"$\" + (billing * diffDays)\r\n            //           },\r\n            //       )\r\n            //   })\r\n\r\n              setBillingDetails(billDetails);\r\n          });\r\n\r\n      }\r\n      \r\n    function setCurrentProject(e) {\r\n\r\n        var project = props.projectlist[e.target.name]\r\n        setprojDetailsVisible(true)\r\n        setState(prevstate => {\r\n            return {\r\n                ...prevstate,\r\n                shouldShowProjections: false,\r\n                projectName: project.projectName,\r\n                startDate: new Date(Date.parse(project.startDate)),\r\n                endDate: new Date(Date.parse(project.endDate)),\r\n                description: project.description,\r\n                resources: project.resources,\r\n                poStatus: project.poStatus == 0 ? \"Active\" : \"Inactive\",\r\n                poValue: project.poValue,\r\n                poType: project.poType == 0 ? \"SOW\" : \"Beeline\",\r\n                projType: project.projectType == 0 ? \"T&M\" : \"Fixed Price\",\r\n                poNum: project.poNumber,\r\n                origPoNum: project.orginalPoNumber,\r\n                salesSegment: project.salesSegment,\r\n                cluster: project.cluster,\r\n                clientPartner: project.clientPartner,\r\n                accountManager: project.accountManager,\r\n                cdmName: project.cdmName,\r\n                projDetailsVisible: true\r\n            }\r\n        }\r\n        );\r\n    }\r\n\r\n\r\n    function UpdateItems() {\r\n        setItems([\r\n            {\r\n                \"Field\": \"PO Number\",\r\n                \"Value\": state.poNum\r\n            },\r\n            {\r\n                \"Field\": \"Name\",\r\n                \"Value\": state.projectName\r\n            }, {\r\n                \"Field\": \"Description\",\r\n                \"Value\": state.description\r\n            }, {\r\n                \"Field\": \"Start Date\",\r\n                \"Value\": state.startDate.toString()\r\n            }, {\r\n                \"Field\": \"End Date\",\r\n                \"Value\": state.endDate.toString()\r\n            }, {\r\n                \"Field\": \"Original PO Number\",\r\n                \"Value\": state.origPoNum\r\n            }, {\r\n                \"Field\": \"PO Current Status\",\r\n                \"Value\": state.poStatus\r\n            }, {\r\n                \"Field\": \"PO Value\",\r\n                \"Value\": state.poValue\r\n            }, {\r\n                \"Field\": \"PO Type\",\r\n                \"Value\": state.poType\r\n            }, {\r\n                \"Field\": \"Project Type\",\r\n                \"Value\": state.projType\r\n            }, {\r\n                \"Field\": \"Sales Segment\",\r\n                \"Value\": state.salesSegment\r\n            }, {\r\n                \"Field\": \"Cluster \",\r\n                \"Value\": state.cluster\r\n            }, {\r\n                \"Field\": \"Client Partner(L1)\",\r\n                \"Value\": state.clientPartner\r\n            }, {\r\n                \"Field\": \"Account Manager(L2)\",\r\n                \"Value\": state.accountManager\r\n            }, {\r\n                \"Field\": \"CDM Name\",\r\n                \"Value\": state.cdmName\r\n            }\r\n        ]);\r\n        var resDetails = [];\r\n        state.resources.map(res =>{\r\n            resDetails.push(\r\n                {\r\n                    \"ResourceName\": res.resourceName,\r\n                    \"Billing (/day)\": res.billing,\r\n                }\r\n            )   \r\n        } ) \r\n        setResourceDetails(resDetails) ;\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        UpdateItems();\r\n    }, [state]);\r\n\r\n    //setprojlist(props.projectlist);\r\n    return (<div>\r\n        <h1 className=\"ProjectsList\"> Projects List </h1>\r\n        {\r\n            props.projectlist.map((proj, index) => {\r\n                console.log(proj.projectName);\r\n                return <div><Link onClick={setCurrentProject} name={index}>{proj.projectName} </Link> <br /></div>\r\n            })\r\n        }\r\n\r\n        <If condition={projDetailsVisible}>\r\n            <DetailsList\r\n                items={items}\r\n                setKey=\"set\"\r\n                layoutMode={DetailsListLayoutMode.justified}\r\n                selectionMode={SelectionMode.none}\r\n            />\r\n            <If condition={state.resources.length > 0}>\r\n                    <h3> Resources </h3>\r\n                    <DetailsList\r\n                        items={resourceDetails}\r\n                        setKey=\"set\"\r\n                        layoutMode={DetailsListLayoutMode.justified}\r\n                        selectionMode={SelectionMode.none}\r\n                    /> \r\n                    <br/>\r\n                 <PrimaryButton id=\"Projections\" onClick={showProjections}>Show Projection</PrimaryButton>\r\n                    </If>\r\n                    <If condition={state.resources.length == 0}>\r\n                    <h3> No resources assigned to the project as of now. </h3>\r\n                    </If>\r\n                    <br/>\r\n        </If>\r\n                <br></br>\r\n                <If condition={state.shouldShowProjections} >\r\n                <DetailsList\r\n                        items={billingDetails}\r\n                        setKey=\"set\"\r\n                        layoutMode={DetailsListLayoutMode.justified}\r\n                        selectionMode={SelectionMode.none}\r\n                    /> \r\n                    <h3> Total Bill - ${state.totalBill}</h3>\r\n                </If>\r\n        <br />\r\n    </div>);\r\n\r\n}\r\n\r\nexport default Projects;"]},"metadata":{},"sourceType":"module"}