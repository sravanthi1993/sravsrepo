[{"C:\\SravsGithub\\sravsrepo\\projections\\src\\index.js":"1","C:\\SravsGithub\\sravsrepo\\projections\\src\\App.js":"2","C:\\SravsGithub\\sravsrepo\\projections\\src\\reportWebVitals.js":"3","C:\\SravsGithub\\sravsrepo\\projections\\src\\Components\\AddProject.js":"4","C:\\SravsGithub\\sravsrepo\\projections\\src\\Components\\AddResource.js":"5","C:\\SravsGithub\\sravsrepo\\projections\\src\\Components\\Search.js":"6","C:\\SravsGithub\\sravsrepo\\projections\\src\\Components\\Holidays.js":"7","C:\\SravsGithub\\sravsrepo\\projections\\src\\Config.js":"8"},{"size":669,"mtime":1614733030477,"results":"9","hashOfConfig":"10"},{"size":1440,"mtime":1614297933897,"results":"11","hashOfConfig":"10"},{"size":375,"mtime":1612225784510,"results":"12","hashOfConfig":"10"},{"size":7077,"mtime":1614664814315,"results":"13","hashOfConfig":"10"},{"size":2564,"mtime":1614664206929,"results":"14","hashOfConfig":"10"},{"size":11974,"mtime":1614721171090,"results":"15","hashOfConfig":"10"},{"size":2557,"mtime":1614304694355,"results":"16","hashOfConfig":"10"},{"size":238,"mtime":1614731260562,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3xx2br",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\SravsGithub\\sravsrepo\\projections\\src\\index.js",[],"C:\\SravsGithub\\sravsrepo\\projections\\src\\App.js",[],["40","41"],"C:\\SravsGithub\\sravsrepo\\projections\\src\\reportWebVitals.js",[],"C:\\SravsGithub\\sravsrepo\\projections\\src\\Components\\AddProject.js",["42","43","44","45","46","47","48","49","50","51","52","53"],"import React, {useState, useEffect} from 'react'; \r\nimport {v1 as uuid} from \"uuid\"; \r\nimport \"./AddProject.css\"\r\nimport { Label } from 'office-ui-fabric-react/lib/Label';\r\nimport { TextField, PrimaryButton, ChoiceGroup, Stack, IStackTokens } from 'office-ui-fabric-react';\r\nimport { DatePicker, DayOfWeek, IDatePickerStrings, mergeStyleSets } from 'office-ui-fabric-react';\r\n\r\n\tconst AddProject = () => {\r\n        const [state, setState] = useState({\r\n            projName : \"\",\r\n            description : \"\",\r\n            startDate : new Date(),\r\n            endDate : new Date(),\r\n            indicatorText: \"\",\r\n            poStatus:\"active\",\r\n            poValue: \"\",\r\n            poNum: \"\",\r\n            origPoNum: \"\",\r\n            poType: \"sow\",\r\n            projType: \"t&m\",\r\n            salesSegment: \"\",\r\n            cluster: \"\",\r\n            clientPartner: \"\",\r\n            accountManager: \"\",\r\n            cdmName: \"\"\r\n          });\r\n\r\n        const [poStatusOptions, setPoStatusOptions] = useState([\r\n            { key: 'active', text: 'Active' },\r\n            { key: 'inActive', text: 'Inactive' },\r\n          ])  \r\n\r\n          const [poTypes, setPOTypes] = useState([\r\n            { key: 'sow', text: 'SOW' },\r\n            { key: 'beeline', text: 'Beeline' },\r\n          ]) \r\n\r\n          const [projTypes, setProjTypes] = useState([\r\n            { key: 't&m', text: 'T&M' },\r\n            { key: 'fixed', text: 'Fixed Price' },\r\n            { key: 'na', text: 'N/A' }\r\n          ])\r\n\r\n        function setOption(e, option) {\r\n            setState(prevState => { return {...prevState, [e.target.name]:option.key}})\r\n        }\r\n\r\n        function setProperty(e) {\r\n            var name  = e.target.name;\r\n            var val = e.target.value;\r\n\r\n            console.log(name + \"-\" + val)\r\n                setState(prevstate => {\r\n                    return {...prevstate, [name]:  val };\r\n                });\r\n        } \r\n\r\n        function setStartDate(date){\r\n            setState(prevstate => {\r\n                return {...prevstate, \"startDate\":  date };\r\n            });\r\n        }\r\n    \r\n        function setEndDate(date) {\r\n            setState(prevstate => {\r\n                return {...prevstate, \"endDate\":  date };\r\n            });\r\n        }\r\n\r\n        \r\n        \r\n        \r\n\r\n        function onSubmit(e) {\r\n            e.preventDefault();\r\n            console.log(state.startDate + \" ---- \"+ state.endDate);\r\n            const url = \"https://projectionsazurefunctions.azurewebsites.net/api/AddProject?code=aRwmurbZKy0napFo3BPImB79fgC3Hx5Ejk4FZGPmUuNWbR2bZIbdZg==\";\r\n            //const url = \"http://localhost:7071/api/AddProject\";\r\n            fetch(url, {\r\n                  method : \"POST\",\r\n                  mode: \"no-cors\",\r\n                  headers: {\r\n                      'Content-Type': 'application/json',\r\n                      // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                    },\r\n                  body:  JSON.stringify({\r\n                      \"ProjectID\": uuid(),\r\n                      \"ProjectName\": state.projName,\r\n                      \"Description\": state.description,\r\n                      \"StartDate\": state.startDate,\r\n                      \"EndDate\": state.endDate,\r\n                      \"PoStatus\": state.poStatus == \"active\" ? 0: 1,\r\n                      \"PoValue\": parseInt(state.poValue) || 0,\r\n                      \"PoNumber\": parseInt(state.poNum) || 0,\r\n                      \"OrginalPoNumber\": parseInt(state.origPoNum) || 0,\r\n                      \"PoType\": state.poType == \"sow\" ? 0: 1,\r\n                      \"ProjectType\": state.projType == \"t&m\" ? 0 : 1,\r\n                      \"SalesSegment\": state.salesSegment,\r\n                      \"Cluster\": state.cluster,\r\n                      \"ClientPartner\": state.clientPartner,\r\n                      \"AccountManager\": state.accountManager,\r\n                      \"CdmName\": state.cdmName\r\n                  })\r\n              }).then(response => {\r\n                  setState({indicatorText: \"Added new Project\"});\r\n              }).catch(err => {setState({indicatorText: \"Ran into an error while adding project \" + err})});\r\n          }\r\n\r\n\r\n\t\treturn (\r\n            <div>\r\n            <form onSubmit={onSubmit} >\r\n            <React.Fragment>\r\n                <Label className=\"Label\"> Enter the details of the project below</Label>\r\n                <TextField className=\"field\" label=\"Name\" name=\"projName\" value={state.projName} onChange={setProperty}/>\r\n                <TextField className=\"field\" label=\"Description\" name=\"description\" value={state.description} onChange={setProperty}/>\r\n                <DatePicker className=\"field\" label=\"Start Date\" placeholder=\"Select a date...\" name=\"startDate\" value={state.startDate} onSelectDate={setStartDate} ariaLabel=\"Select a date\"/>\r\n                <DatePicker className=\"field\" label=\"End Date\" placeholder=\"Select a date...\" name=\"endDate\" value={state.endDate} onSelectDate={setEndDate} ariaLabel=\"Select a date\"/>\r\n                <TextField className=\"field\" label=\"PO Number\" name=\"poNum\" value={state.poNum} onChange={setProperty}/>\r\n                <TextField className=\"field\" label=\"Original PO Number\" name=\"origPoNum\" value={state.origPoNum} onChange={setProperty}/>\r\n                <ChoiceGroup row className=\"field\" name=\"poStatus\" selectedKey={state.poStatus} options={poStatusOptions} onChange={setOption} label=\"PO Current Status\" />\r\n                <TextField className=\"field\" label=\"PO Value\" name=\"poValue\" value={state.poValue} onChange={setProperty}/>\r\n                <ChoiceGroup className=\"field\" selectedKey={state.poType} name=\"poType\" options={poTypes} onChange={setOption} label=\"PO Type\" />\r\n                <ChoiceGroup className=\"field\" selectedKey={state.projType} name=\"projType\" options={projTypes} onChange={setOption} label=\"Project Type\" />\r\n                <TextField className=\"field\" label=\"Sales Segment \" name=\"salesSegment\" value={state.salesSegment} onChange={setProperty}/>\r\n                <TextField className=\"field\" label=\"Cluster\" name=\"cluster\" value={state.cluster} onChange={setProperty}/>\r\n                <TextField className=\"field\" label=\"Client Partner(L1)\" name=\"clientPartner\" value={state.clientPartner} onChange={setProperty}/>\r\n                <TextField className=\"field\" label=\"Account Manager(L2)\" name=\"accountManager\" value={state.accountManager} onChange={setProperty}/>\r\n                <TextField className=\"field\" label=\"CDM Name\" name=\"cdmName\" value={state.cdmName} onChange={setProperty}/>\r\n                \r\n                <PrimaryButton className=\"Add\" text=\"AddResource\" onClick={onSubmit} allowDisabledFocus />\r\n                <PrimaryButton className=\"Add\" text=\"Add\" onClick={onSubmit} allowDisabledFocus />\r\n                {/* <button id=\"AddProject\"> Add </button> */}\r\n                <br/>\r\n                <Label className=\"Indicator\">{state.indicatorText}</Label>\r\n            </React.Fragment>\r\n            </form>\r\n            </div>\r\n        );\r\n\t}\r\n\r\nexport default AddProject; \r\n","C:\\SravsGithub\\sravsrepo\\projections\\src\\Components\\AddResource.js",["54","55"],"import React, { useState } from 'react';\r\nimport {v1 as uuid} from \"uuid\"; \r\nimport { TextField, PrimaryButton, Stack, IStackTokens } from 'office-ui-fabric-react';\r\n\r\nfunction AddResource() \r\n{ \r\n    const [state, setState] = useState({\r\n        resName : \"\",\r\n        skils : \"\",\r\n        billing : \"\",\r\n        projectId : \"\",\r\n        resourceprojectstartdate : new Date(),//added new\r\n        indicatorText: \"\"\r\n      });\r\n\r\n    //setState( { \"projName\" : \"asadsa\" });\r\n    function setProperty(e) {\r\n        setState(prevState => {\r\n            return {...prevState, [e.target.name] : e.target.value };\r\n        });\r\n    }\r\n\r\n\r\n    function onSubmit(e){\r\n      e.preventDefault();\r\n      const url = \"https://projectionsazurefunctions.azurewebsites.net/api/AddResource?code=20KXEmWE7j4hdDDcfYzaqH0fU48lLMxM8ufMP5xKZe5HaLqmMAq3fw==\";\r\n      //const url = \"http://localhost:7071/api/AddResource\";\r\n      fetch(url, {\r\n            method : \"POST\",\r\n            mode: \"no-cors\",\r\n            body:  JSON.stringify({\r\n                \"ResourceID\": uuid(),\r\n                \"ResourceName\": state.resName,\r\n                \"Skills\": state.skills,\r\n                \"Billing\": parseInt(state.billing) || 0,\r\n                \"ProjectID\": state.projectId,\r\n                \r\n            })\r\n        })\r\n        .then(response => {\r\n            setState({indicatorText: \"Added new Resource\"});\r\n        }).catch(err => {setState({indicatorText: \"Ran into an error while adding Resource\" + err})});\r\n    }\r\n\r\n\t\treturn (\r\n            <form onSubmit={onSubmit} >\r\n            <React.Fragment>\r\n            <div>\r\n                <h1> Add Resource</h1>\r\n                <h3> Enter the details of the project below</h3>\r\n\r\n                <TextField className=\"field\" label=\"Name\" name=\"resName\" value={state.resName} onChange={setProperty}/>\r\n                <TextField className=\"field\" label=\"Skills\" name=\"skills\" value={state.skills} onChange={setProperty}/>\r\n                <TextField className=\"field\" label=\"Billing (/hr)\" name=\"billing\" value={state.billing} onChange={setProperty}/>\r\n                <TextField className=\"field\" label=\"Project ID\" name=\"projectId\" value={state.projectId} onChange={setProperty}/>\r\n                <PrimaryButton className=\"Add\" text=\"Add\" onClick={onSubmit} allowDisabledFocus />\r\n\r\n                <br/>\r\n                <label className=\"Indicator\">{state.indicatorText}</label>\r\n            \r\n            </div>\r\n            </React.Fragment>\r\n            </form>\r\n            \r\n        );\r\n} \r\n\r\nexport default AddResource; \r\n","C:\\SravsGithub\\sravsrepo\\projections\\src\\Components\\Search.js",["56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78"],"import React, {useState} from 'react';\r\nimport './Search.css';\r\nimport { If, Else, Elif } from 'rc-if-else';\r\nimport { Label, PrimaryButton, List } from 'office-ui-fabric-react';\r\nimport { SearchBox, ISearchBoxStyles } from 'office-ui-fabric-react/lib/SearchBox';\r\nimport { DetailsList, DetailsListLayoutMode, SelectionMode, Selection, IColumn } from 'office-ui-fabric-react/lib/DetailsList';\r\n\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\n\r\nconst _MS_PER_DAY = 1000 * 60 * 60 * 24;\r\n//const holidays = [new Date(2021,1,19), new Date(2021,4,28)];\r\nvar listofholidays = []\r\nfunction Search(){\r\n\r\n\r\n    const [resourceDetails, setResourceDetails ] = useState([]);\r\n    const [billingDetails, setBillingDetails] = useState([]);\r\n    const [items, setItems] = useState([]);\r\n    const searchBoxStyles = { root: { width: 200 } };\r\n    const [state, setState] = useState({\r\n        searchString: \"\",\r\n        projectID: \"\",\r\n        projectName : \"\",\r\n        description : \"\",\r\n        startDate : new Date(),\r\n        endDate : new Date(),\r\n        projDetailsVisible: false,\r\n        resources: [],\r\n        projNotFound: false,\r\n        shouldShowProjections: false,\r\n        totalBill: 0,\r\n        poStatus:\"active\",\r\n        poValue: \"\",\r\n        poNum: \"\",\r\n        origPoNum: \"\",\r\n        poType: \"sow\",\r\n        projType: \"t&m\",\r\n        salesSegment: \"\",\r\n        cluster: \"\",\r\n        clientPartner: \"\",\r\n        accountManager: \"\",\r\n        cdmName: \"\"\r\n      });\r\n\r\n    function UpdateItems()\r\n    {\r\n        setItems( [\r\n            {\r\n                \"Field\": \"PO Number\",\r\n                \"Value\": state.poNum\r\n            },\r\n            {\r\n                \"Field\": \"Name\",\r\n                \"Value\": state.projectName\r\n            }, {\r\n                \"Field\": \"Description\",\r\n                \"Value\": state.description\r\n            }, {\r\n                \"Field\": \"Start Date\",\r\n                \"Value\": state.startDate.toString()\r\n            }, {\r\n                \"Field\": \"End Date\",\r\n                \"Value\": state.endDate.toString()\r\n            }, {\r\n                \"Field\": \"Original PO Number\",\r\n                \"Value\": state.origPoNum\r\n            }, {\r\n                \"Field\": \"PO Current Status\",\r\n                \"Value\": state.poStatus\r\n            }, {\r\n                \"Field\": \"PO Value\",\r\n                \"Value\": state.poValue\r\n            }, {\r\n                \"Field\": \"PO Type\",\r\n                \"Value\": state.poType\r\n            }, {\r\n                \"Field\": \"Project Type\",\r\n                \"Value\": state.projType\r\n            }, {\r\n                \"Field\": \"sSales Segment\",\r\n                \"Value\": state.salesSegment\r\n            }, {\r\n                \"Field\": \"Cluster \",\r\n                \"Value\": state.cluster\r\n            }, {\r\n                \"Field\": \"Client Partner(L1)\",\r\n                \"Value\": state.clientPartner\r\n            }, {\r\n                \"Field\": \"Account Manager(L2)\",\r\n                \"Value\": state.accountManager\r\n            }, {\r\n                \"Field\": \"CDM Name\",\r\n                \"Value\": state.cdmName\r\n            }\r\n        ]);\r\n        var resDetails = [];\r\n        state.resources.map(res =>{\r\n            resDetails.push(\r\n                {\r\n                    \"ResourceName\": res.resourceName,\r\n                    \"Billing (/day)\": res.billing,\r\n                }\r\n            )   \r\n        } ) \r\n        setResourceDetails(resDetails) ;\r\n    }\r\n    \r\n    React.useEffect(() => {\r\n        UpdateItems();\r\n      }, [state]);\r\n\r\n    function onSubmit(searchString) {\r\n        //e.preventDefault();\r\n        const url = \"https://projectionsazurefunctions.azurewebsites.net/api/Search?code=CbTDUtF5NSctIKh/jP6BmrifZ17wiSyQvqc0COv0G1ybdouglcICWw==&ProjectName=\"+searchString;\r\n        //const url = \"http://localhost:7071/api/Search?ProjectName=\"+searchString;\r\n        \r\n\r\n        fetch(url, {\r\n              method : \"GET\",\r\n            }).then(response => response.json()\r\n            ).then(project => {\r\n                if(project.poNumber != 0)\r\n                {\r\n                setState(prevstate =>\r\n                    {return{...prevstate,\r\n                      shouldShowProjections: false,\r\n                      projectName: project.projectName,\r\n                      startDate: new Date(Date.parse(project.startDate)),\r\n                      endDate: new Date(Date.parse(project.endDate)),\r\n                      description: project.description,\r\n                      resources: project.resources,\r\n                      poStatus: project.poStatus == 0 ? \"Active\" : \"Inactive\",\r\n                      poValue: project.poValue,\r\n                      poType: project.poType == 0 ? \"SOW\" : \"Beeline\",\r\n                      projType: project.projectType == 0 ? \"T&M\" : \"Fixed Price\",\r\n                      poNum: project.poNumber,\r\n                      origPoNum: project.orginalPoNumber,\r\n                      salesSegment: project.salesSegment,\r\n                      cluster: project.cluster,\r\n                      clientPartner: project.clientPartner,\r\n                      accountManager: project.accountManager,\r\n                      cdmName: project.cdmName\r\n                    }\r\n                    }\r\n                );\r\n                setState(prevState =>\r\n                    {return {...prevState, \r\n                      projDetailsVisible: true,  \r\n                      projNotFound: false,\r\n                    }})\r\n                }\r\n                else{\r\n                    setState(prevstate =>\r\n                        {return{...prevstate,\r\n                            projNotFound: true,\r\n                            projDetailsVisible: false,\r\n                            shouldShowProjections: false}\r\n                        })\r\n                }\r\n\r\n            }).catch(err => {alert(err)});\r\n      }\r\n      \r\n     function computeWorkingDaysBetweenTwoDays(startDate, endDate) {\r\n      \r\n      // Validate input\r\n        if (endDate <= startDate) {\r\n          return 0;\r\n        }\r\n      \r\n      // Calculate days between dates\r\n        var millisecondsPerDay = 86400 * 1000; // Day in milliseconds\r\n        startDate.setHours(0, 0, 0, 1);  // Start just after midnight\r\n        endDate.setHours(23, 59, 59, 999);  // End just before midnight\r\n        var diff = endDate - startDate;  // Milliseconds between datetime objects    \r\n        var days = Math.ceil(diff / millisecondsPerDay);\r\n      \r\n        // Subtract two weekend days for every week in between\r\n        var weeks = Math.floor(days / 7);\r\n        days -= weeks * 2;\r\n      \r\n        // Handle special cases\r\n        var startDay = startDate.getDay();\r\n        var endDay = endDate.getDay();\r\n          \r\n        // Remove weekend not previously removed.   \r\n        if (startDay - endDay > 1) {\r\n          days -= 2;\r\n        }\r\n        // Remove start day if span starts on Sunday but ends before Saturday\r\n        if (startDay == 0 && endDay != 6) {\r\n          days--;  \r\n        }\r\n        // Remove end day if span ends on Saturday but starts after Sunday\r\n        if (endDay == 6 && startDay != 0) {\r\n          days--;\r\n        }\r\n\r\n        /* Here is the code */\r\n        listofholidays.forEach(day => {\r\n            console.log(day + \" -- \" + startDate + \" -- \" + endDate)\r\n          if ((day >= startDate) && (day <= endDate)) {\r\n              days--;\r\n          }\r\n        });\r\n        return days;\r\n     }\r\n\r\n      function showProjections() {\r\n          \r\n        //const url = \"http://localhost:7071/api/GetHolidays\";\r\n        const url = \"https://projectionsazurefunctions.azurewebsites.net/api/GetHolidays?code=IGZG4SdEVqbHWYhV32asIb8junLY3IttJDVB4KjCjL3aNGyr0L1rOg==\"\r\n        fetch(url, {\r\n            method : \"GET\"\r\n          }).then(response => response.json()\r\n          ).then(holidays => {\r\n              console.log(holidays);\r\n              holidays.map(holiday =>  \r\n                {\r\n                    listofholidays.push(new Date(Date.parse(holiday.holidayDate)))\r\n                });\r\n              console.log(listofholidays)\r\n\r\n              var billing = 0\r\n              state.resources.map(res =>{\r\n                  billing +=res.billing;   \r\n              } )   \r\n              var a = state.startDate;\r\n              var b = state.endDate;\r\n              \r\n              var start = state.startDate;\r\n              var end = new Date(a.getFullYear(), a.getMonth() + 1, 0);\r\n              end = (end > state.endDate) ? state.endDate: end;\r\n              var total = 0;\r\n              var billDetails = [];\r\n              var year = a.getFullYear();\r\n              while (end >= start)\r\n              {\r\n                  var diffDays = computeWorkingDaysBetweenTwoDays(start, end);\r\n                  total += billing*diffDays;\r\n                  billDetails.push(\r\n                      {\r\n                        \"Month\": monthNames[start.getMonth()] + \" \" + start.getFullYear(),\r\n                        \"Working days\": diffDays,\r\n                        \"Monthly Bill\": \"$\"+(billing*diffDays)},\r\n                      )\r\n      \r\n                  var month = start.getMonth() == 11 ? -1 : start.getMonth();\r\n                  year = start.getMonth() == 11 ? year+1: year;\r\n                  start = new Date(year, month + 1, 1);\r\n                  end = new Date(year, start.getMonth()+1, 0);\r\n                  end = (end > state.endDate) ? state.endDate: end;\r\n             }\r\n      \r\n             setState(prevstate => {\r\n                  return{...prevstate,totalBill : total,\r\n                      shouldShowProjections: true,}\r\n                  \r\n              })\r\n              setBillingDetails(billDetails);\r\n          });\r\n\r\n      }\r\n\r\n        return(\r\n            <div className=\"SearchSection\">\r\n                <Label>Search for the Project ID</Label>\r\n                <SearchBox\r\n                    styles={searchBoxStyles}\r\n                    placeholder=\"Enter the Project name\"\r\n                    onSearch={onSubmit}\r\n                />\r\n                <If condition={state.projNotFound}>\r\n                    <h3> Project not found! </h3>\r\n                </If>\r\n                <If condition={state.projDetailsVisible}>\r\n                <h2 className = \"projdetailheader\"> Project Details </h2>\r\n                    <DetailsList\r\n                        items={items}\r\n                        setKey=\"set\"\r\n                        layoutMode={DetailsListLayoutMode.justified}\r\n                        selectionMode={SelectionMode.none}\r\n                    /> <br/>\r\n                    <If condition={state.resources.length > 0}>\r\n                    <h3> Resources </h3>\r\n                    <DetailsList\r\n                        items={resourceDetails}\r\n                        setKey=\"set\"\r\n                        layoutMode={DetailsListLayoutMode.justified}\r\n                        selectionMode={SelectionMode.none}\r\n                    /> \r\n                    </If>\r\n                    <If condition={state.resources.length == 0}>\r\n                    <h3> No resources assigned to the project as of now. </h3>\r\n                    </If>\r\n                    <br/>\r\n                </If>\r\n                <If condition={state.resources.length > 0}>\r\n                 <PrimaryButton id=\"Projections\" onClick={showProjections}>Show Projection</PrimaryButton>\r\n                </If>\r\n                <br></br>\r\n                <If condition={state.shouldShowProjections} >\r\n                <DetailsList\r\n                        items={billingDetails}\r\n                        setKey=\"set\"\r\n                        layoutMode={DetailsListLayoutMode.justified}\r\n                        selectionMode={SelectionMode.none}\r\n                    /> \r\n                    <h3> Total Bill - ${state.totalBill}</h3>\r\n                </If>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default Search;","C:\\SravsGithub\\sravsrepo\\projections\\src\\Components\\Holidays.js",["79","80","81","82","83","84","85"],"import React, {useState, useEffect} from 'react';\r\nimport { Label } from 'office-ui-fabric-react/lib/Label';\r\nimport { TextField, PrimaryButton, ChoiceGroup, Stack, IStackTokens } from 'office-ui-fabric-react';\r\nimport { DatePicker, DayOfWeek, IDatePickerStrings, mergeStyleSets } from 'office-ui-fabric-react';\r\n\r\nconst Holidays = () => {\r\n    const[state,setState] = useState ({\r\n        HolDate : new Date(),\r\n        Occasion : \"\"\r\n    });\r\n\r\n\r\n    function setHolDate(date){\r\n        setState(prevstate => {\r\n            return {...prevstate, \"HolDate\":  date };\r\n        });\r\n    }\r\n\r\n    function setProperty(e) {\r\n        var name  = e.target.name;\r\n        var val = e.target.value ;\r\n\r\n        console.log(name + \"--\" + val)\r\n                setState(prevstate => {\r\n                    return {...prevstate, [name]: val};\r\n                });\r\n    }\r\n\r\n    \r\n    function onSubmit(e) {\r\n        e.preventDefault();\r\n        console.log(state.HolDate + \" ---- \"+ state.Occasion);\r\n        //const url = \"https://projectionsazurefunctions.azurewebsites.net/api/AddProject?code=aRwmurbZKy0napFo3BPImB79fgC3Hx5Ejk4FZGPmUuNWbR2bZIbdZg==\";\r\n        const url = \"http://localhost:7071/api/Holidays\";\r\n        fetch(url, {\r\n              method : \"POST\",\r\n              mode: \"no-cors\",\r\n              headers: {\r\n                  'Content-Type': 'application/json',\r\n                  // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n              body:  JSON.stringify({\r\n                  \r\n                  \"HolidayDate\": state.HolDate,\r\n                  \"Occasion\" : state.Occasion,\r\n                  \r\n              })\r\n          }).then(response => {\r\n              setState({indicatorText: \"Added Holidays\"});\r\n          }).catch(err => {setState({indicatorText: \"Ran into an error while adding project \" + err})});\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        <form onSubmit={onSubmit} >\r\n        <React.Fragment>\r\n        <Label className=\"Label\"> Enter Holidays</Label>\r\n        \r\n        <DatePicker className=\"field\" label=\"Pick Holidays\" placeholder=\"Select a date...\" name=\"HolDate\" value={state.HolDate} onSelectDate={setHolDate} ariaLabel=\"Select a date\"/>\r\n        <TextField className=\"field\" label=\"Name of Occasion\" name=\"Occasion\" value={state.Occasion} onChange={setProperty}/>\r\n        <PrimaryButton className=\"Add\" text=\"Add Holidays\" onClick={onSubmit} allowDisabledFocus />\r\n        </React.Fragment>\r\n            </form>\r\n            </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Holidays;",["86","87"],"C:\\SravsGithub\\sravsrepo\\projections\\src\\Config.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":26,"nodeType":"94","messageId":"95","endLine":1,"endColumn":35},{"ruleId":"92","severity":1,"message":"96","line":5,"column":49,"nodeType":"94","messageId":"95","endLine":5,"endColumn":54},{"ruleId":"92","severity":1,"message":"97","line":5,"column":56,"nodeType":"94","messageId":"95","endLine":5,"endColumn":68},{"ruleId":"92","severity":1,"message":"98","line":6,"column":22,"nodeType":"94","messageId":"95","endLine":6,"endColumn":31},{"ruleId":"92","severity":1,"message":"99","line":6,"column":33,"nodeType":"94","messageId":"95","endLine":6,"endColumn":51},{"ruleId":"92","severity":1,"message":"100","line":6,"column":53,"nodeType":"94","messageId":"95","endLine":6,"endColumn":67},{"ruleId":"92","severity":1,"message":"101","line":28,"column":33,"nodeType":"94","messageId":"95","endLine":28,"endColumn":51},{"ruleId":"92","severity":1,"message":"102","line":33,"column":27,"nodeType":"94","messageId":"95","endLine":33,"endColumn":37},{"ruleId":"92","severity":1,"message":"103","line":38,"column":29,"nodeType":"94","messageId":"95","endLine":38,"endColumn":41},{"ruleId":"104","severity":1,"message":"105","line":92,"column":50,"nodeType":"106","messageId":"107","endLine":92,"endColumn":52},{"ruleId":"104","severity":1,"message":"105","line":96,"column":46,"nodeType":"106","messageId":"107","endLine":96,"endColumn":48},{"ruleId":"104","severity":1,"message":"105","line":97,"column":53,"nodeType":"106","messageId":"107","endLine":97,"endColumn":55},{"ruleId":"92","severity":1,"message":"96","line":3,"column":36,"nodeType":"94","messageId":"95","endLine":3,"endColumn":41},{"ruleId":"92","severity":1,"message":"97","line":3,"column":43,"nodeType":"94","messageId":"95","endLine":3,"endColumn":55},{"ruleId":"92","severity":1,"message":"108","line":3,"column":14,"nodeType":"94","messageId":"95","endLine":3,"endColumn":18},{"ruleId":"92","severity":1,"message":"109","line":3,"column":20,"nodeType":"94","messageId":"95","endLine":3,"endColumn":24},{"ruleId":"92","severity":1,"message":"110","line":4,"column":32,"nodeType":"94","messageId":"95","endLine":4,"endColumn":36},{"ruleId":"92","severity":1,"message":"111","line":5,"column":21,"nodeType":"94","messageId":"95","endLine":5,"endColumn":37},{"ruleId":"92","severity":1,"message":"112","line":6,"column":61,"nodeType":"94","messageId":"95","endLine":6,"endColumn":70},{"ruleId":"92","severity":1,"message":"113","line":6,"column":72,"nodeType":"94","messageId":"95","endLine":6,"endColumn":79},{"ruleId":"92","severity":1,"message":"114","line":12,"column":7,"nodeType":"94","messageId":"95","endLine":12,"endColumn":18},{"ruleId":"115","severity":1,"message":"116","line":99,"column":33,"nodeType":"117","messageId":"118","endLine":99,"endColumn":35},{"ruleId":"119","severity":1,"message":"120","line":112,"column":10,"nodeType":"121","endLine":112,"endColumn":17,"suggestions":"122"},{"ruleId":"104","severity":1,"message":"123","line":124,"column":37,"nodeType":"106","messageId":"107","endLine":124,"endColumn":39},{"ruleId":"104","severity":1,"message":"105","line":134,"column":50,"nodeType":"106","messageId":"107","endLine":134,"endColumn":52},{"ruleId":"104","severity":1,"message":"105","line":136,"column":46,"nodeType":"106","messageId":"107","endLine":136,"endColumn":48},{"ruleId":"104","severity":1,"message":"105","line":137,"column":53,"nodeType":"106","messageId":"107","endLine":137,"endColumn":55},{"ruleId":"104","severity":1,"message":"105","line":193,"column":22,"nodeType":"106","messageId":"107","endLine":193,"endColumn":24},{"ruleId":"104","severity":1,"message":"123","line":193,"column":37,"nodeType":"106","messageId":"107","endLine":193,"endColumn":39},{"ruleId":"104","severity":1,"message":"105","line":197,"column":20,"nodeType":"106","messageId":"107","endLine":197,"endColumn":22},{"ruleId":"104","severity":1,"message":"123","line":197,"column":37,"nodeType":"106","messageId":"107","endLine":197,"endColumn":39},{"ruleId":"115","severity":1,"message":"116","line":220,"column":36,"nodeType":"117","messageId":"118","endLine":220,"endColumn":38},{"ruleId":"115","severity":1,"message":"116","line":227,"column":39,"nodeType":"117","messageId":"118","endLine":227,"endColumn":41},{"ruleId":"92","severity":1,"message":"124","line":231,"column":19,"nodeType":"94","messageId":"95","endLine":231,"endColumn":20},{"ruleId":"104","severity":1,"message":"105","line":250,"column":48,"nodeType":"106","messageId":"107","endLine":250,"endColumn":50},{"ruleId":"104","severity":1,"message":"105","line":251,"column":43,"nodeType":"106","messageId":"107","endLine":251,"endColumn":45},{"ruleId":"104","severity":1,"message":"105","line":295,"column":59,"nodeType":"106","messageId":"107","endLine":295,"endColumn":61},{"ruleId":"92","severity":1,"message":"93","line":1,"column":26,"nodeType":"94","messageId":"95","endLine":1,"endColumn":35},{"ruleId":"92","severity":1,"message":"125","line":3,"column":36,"nodeType":"94","messageId":"95","endLine":3,"endColumn":47},{"ruleId":"92","severity":1,"message":"96","line":3,"column":49,"nodeType":"94","messageId":"95","endLine":3,"endColumn":54},{"ruleId":"92","severity":1,"message":"97","line":3,"column":56,"nodeType":"94","messageId":"95","endLine":3,"endColumn":68},{"ruleId":"92","severity":1,"message":"98","line":4,"column":22,"nodeType":"94","messageId":"95","endLine":4,"endColumn":31},{"ruleId":"92","severity":1,"message":"99","line":4,"column":33,"nodeType":"94","messageId":"95","endLine":4,"endColumn":51},{"ruleId":"92","severity":1,"message":"100","line":4,"column":53,"nodeType":"94","messageId":"95","endLine":4,"endColumn":67},{"ruleId":"88","replacedBy":"126"},{"ruleId":"90","replacedBy":"127"},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Stack' is defined but never used.","'IStackTokens' is defined but never used.","'DayOfWeek' is defined but never used.","'IDatePickerStrings' is defined but never used.","'mergeStyleSets' is defined but never used.","'setPoStatusOptions' is assigned a value but never used.","'setPOTypes' is assigned a value but never used.","'setProjTypes' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Else' is defined but never used.","'Elif' is defined but never used.","'List' is defined but never used.","'ISearchBoxStyles' is defined but never used.","'Selection' is defined but never used.","'IColumn' is defined but never used.","'_MS_PER_DAY' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'UpdateItems'. Either include it or remove the dependency array.","ArrayExpression",["130"],"Expected '!==' and instead saw '!='.","'b' is assigned a value but never used.","'ChoiceGroup' is defined but never used.",["128"],["129"],"no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},"Update the dependencies array to be: [UpdateItems, state]",{"range":"133","text":"134"},[3605,3612],"[UpdateItems, state]"]