{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\SravsGithub\\\\sravsrepo\\\\projections\\\\src\\\\Components\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './Search.css';\nimport { If, Else, Elif } from 'rc-if-else';\nimport { Label, Link, PrimaryButton, List } from 'office-ui-fabric-react';\nimport { SearchBox, ISearchBoxStyles } from 'office-ui-fabric-react/lib/SearchBox';\nimport { DetailsList, DetailsListLayoutMode, SelectionMode, Selection, IColumn } from 'office-ui-fabric-react/lib/DetailsList';\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nconst _MS_PER_DAY = 1000 * 60 * 60 * 24; //const holidays = [new Date(2021,1,19), new Date(2021,4,28)];\n\n\nvar listofholidays = [];\n\nfunction Search() {\n  _s();\n\n  const [projlist, setProjlist] = useState([]);\n  const [resourceDetails, setResourceDetails] = useState([]);\n  const [billingDetails, setBillingDetails] = useState([]);\n  const [items, setItems] = useState([]);\n  const searchBoxStyles = {\n    root: {\n      width: 200\n    }\n  };\n  const [state, setState] = useState({\n    searchString: \"\",\n    projectID: \"\",\n    projectName: \"\",\n    description: \"\",\n    startDate: new Date(),\n    endDate: new Date(),\n    projListVisible: false,\n    projDetailsVisible: false,\n    resources: [],\n    projNotFound: false,\n    shouldShowProjections: false,\n    totalBill: 0,\n    poStatus: \"active\",\n    poValue: \"\",\n    poNum: \"\",\n    origPoNum: \"\",\n    poType: \"sow\",\n    projType: \"t&m\",\n    salesSegment: \"\",\n    cluster: \"\",\n    clientPartner: \"\",\n    accountManager: \"\",\n    cdmName: \"\"\n  });\n\n  function UpdateItems() {\n    setItems([{\n      \"Field\": \"PO Number\",\n      \"Value\": state.poNum\n    }, {\n      \"Field\": \"Name\",\n      \"Value\": state.projectName\n    }, {\n      \"Field\": \"Description\",\n      \"Value\": state.description\n    }, {\n      \"Field\": \"Start Date\",\n      \"Value\": state.startDate.toString()\n    }, {\n      \"Field\": \"End Date\",\n      \"Value\": state.endDate.toString()\n    }, {\n      \"Field\": \"Original PO Number\",\n      \"Value\": state.origPoNum\n    }, {\n      \"Field\": \"PO Current Status\",\n      \"Value\": state.poStatus\n    }, {\n      \"Field\": \"PO Value\",\n      \"Value\": state.poValue\n    }, {\n      \"Field\": \"PO Type\",\n      \"Value\": state.poType\n    }, {\n      \"Field\": \"Project Type\",\n      \"Value\": state.projType\n    }, {\n      \"Field\": \"sSales Segment\",\n      \"Value\": state.salesSegment\n    }, {\n      \"Field\": \"Cluster \",\n      \"Value\": state.cluster\n    }, {\n      \"Field\": \"Client Partner(L1)\",\n      \"Value\": state.clientPartner\n    }, {\n      \"Field\": \"Account Manager(L2)\",\n      \"Value\": state.accountManager\n    }, {\n      \"Field\": \"CDM Name\",\n      \"Value\": state.cdmName\n    }]);\n    var resDetails = [];\n    state.resources.map(res => {\n      resDetails.push({\n        \"ResourceName\": res.resourceName,\n        \"Billing (/day)\": res.billing\n      });\n    });\n    setResourceDetails(resDetails);\n  }\n\n  React.useEffect(() => {\n    UpdateItems();\n  }, [state]);\n\n  function setCurrentProject(e) {\n    var project = projlist[e.target.name];\n    setState(prevstate => {\n      return { ...prevstate,\n        shouldShowProjections: false,\n        projectName: project.projectName,\n        startDate: new Date(Date.parse(project.startDate)),\n        endDate: new Date(Date.parse(project.endDate)),\n        description: project.description,\n        resources: project.resources,\n        poStatus: project.poStatus == 0 ? \"Active\" : \"Inactive\",\n        poValue: project.poValue,\n        poType: project.poType == 0 ? \"SOW\" : \"Beeline\",\n        projType: project.projectType == 0 ? \"T&M\" : \"Fixed Price\",\n        poNum: project.poNumber,\n        origPoNum: project.orginalPoNumber,\n        salesSegment: project.salesSegment,\n        cluster: project.cluster,\n        clientPartner: project.clientPartner,\n        accountManager: project.accountManager,\n        cdmName: project.cdmName\n      };\n    });\n  }\n\n  function onSubmit(searchString) {\n    //e.preventDefault();\n    const url = \"https://projectionsazurefunctions.azurewebsites.net/api/Search?code=CbTDUtF5NSctIKh/jP6BmrifZ17wiSyQvqc0COv0G1ybdouglcICWw==&ProjectName=\" + searchString; //const url = \"http://localhost:7071/api/Search?ProjectName=\"+searchString;\n\n    fetch(url, {\n      method: \"GET\"\n    }).then(response => response.json()).then(projects => {\n      console.log(projects);\n\n      if (projects.length != 0) {\n        setProjlist(projects);\n        /* if(project.poNumber != 0)\r\n         {\r\n           setState(prevstate =>\r\n             {return{...prevstate,\r\n               shouldShowProjections: false,\r\n               projectName: project.projectName,\r\n               startDate: new Date(Date.parse(project.startDate)),\r\n               endDate: new Date(Date.parse(project.endDate)),\r\n               description: project.description,\r\n               resources: project.resources,\r\n               poStatus: project.poStatus == 0 ? \"Active\" : \"Inactive\",\r\n               poValue: project.poValue,\r\n               poType: project.poType == 0 ? \"SOW\" : \"Beeline\",\r\n               projType: project.projectType == 0 ? \"T&M\" : \"Fixed Price\",\r\n               poNum: project.poNumber,\r\n               origPoNum: project.orginalPoNumber,\r\n               salesSegment: project.salesSegment,\r\n               cluster: project.cluster,\r\n               clientPartner: project.clientPartner,\r\n               accountManager: project.accountManager,\r\n               cdmName: project.cdmName\r\n             }\r\n             }\r\n         );*/\n\n        setState(prevState => {\n          return { ...prevState,\n            projListVisible: true,\n            projNotFound: false\n          };\n        });\n      } else {\n        setState(prevstate => {\n          return { ...prevstate,\n            projNotFound: true,\n            projListVisible: false,\n            projDetailsVisible: false,\n            shouldShowProjections: false\n          };\n        });\n      }\n    }).catch(err => {\n      alert(err);\n    });\n  }\n\n  function computeWorkingDaysBetweenTwoDays(startDate, endDate) {\n    // Validate input\n    if (endDate <= startDate) {\n      return 0;\n    } // Calculate days between dates\n\n\n    var millisecondsPerDay = 86400 * 1000; // Day in milliseconds\n\n    startDate.setHours(0, 0, 0, 1); // Start just after midnight\n\n    endDate.setHours(23, 59, 59, 999); // End just before midnight\n\n    var diff = endDate - startDate; // Milliseconds between datetime objects    \n\n    var days = Math.ceil(diff / millisecondsPerDay); // Subtract two weekend days for every week in between\n\n    var weeks = Math.floor(days / 7);\n    days -= weeks * 2; // Handle special cases\n\n    var startDay = startDate.getDay();\n    var endDay = endDate.getDay(); // Remove weekend not previously removed.   \n\n    if (startDay - endDay > 1) {\n      days -= 2;\n    } // Remove start day if span starts on Sunday but ends before Saturday\n\n\n    if (startDay == 0 && endDay != 6) {\n      days--;\n    } // Remove end day if span ends on Saturday but starts after Sunday\n\n\n    if (endDay == 6 && startDay != 0) {\n      days--;\n    }\n    /* Here is the code */\n\n\n    listofholidays.forEach(day => {\n      console.log(day + \" -- \" + startDate + \" -- \" + endDate);\n\n      if (day >= startDate && day <= endDate) {\n        days--;\n      }\n    });\n    return days;\n  }\n\n  function showProjections() {\n    //const url = \"http://localhost:7071/api/search\";\n    const url = \"https://projectionsazurefunctions.azurewebsites.net/api/GetHolidays?code=IGZG4SdEVqbHWYhV32asIb8junLY3IttJDVB4KjCjL3aNGyr0L1rOg==\";\n    fetch(url, {\n      method: \"GET\"\n    }).then(response => response.json()).then(holidays => {\n      console.log(holidays);\n      holidays.map(holiday => {\n        listofholidays.push(new Date(Date.parse(holiday.holidayDate)));\n      });\n      console.log(listofholidays);\n      var billing = 0;\n      state.resources.map(res => {\n        billing += res.billing;\n      });\n      var a = state.startDate;\n      var b = state.endDate;\n      var start = state.startDate;\n      var end = new Date(a.getFullYear(), a.getMonth() + 1, 0);\n      end = end > state.endDate ? state.endDate : end;\n      var total = 0;\n      var billDetails = [];\n      var year = a.getFullYear();\n\n      while (end >= start) {\n        var diffDays = computeWorkingDaysBetweenTwoDays(start, end);\n        total += billing * diffDays;\n        billDetails.push({\n          \"Month\": monthNames[start.getMonth()] + \" \" + start.getFullYear(),\n          \"Working days\": diffDays,\n          \"Monthly Bill\": \"$\" + billing * diffDays\n        });\n        var month = start.getMonth() == 11 ? -1 : start.getMonth();\n        year = start.getMonth() == 11 ? year + 1 : year;\n        start = new Date(year, month + 1, 1);\n        end = new Date(year, start.getMonth() + 1, 0);\n        end = end > state.endDate ? state.endDate : end;\n      }\n\n      setState(prevstate => {\n        return { ...prevstate,\n          totalBill: total,\n          shouldShowProjections: true\n        };\n      });\n      setBillingDetails(billDetails);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SearchSection\",\n    children: [/*#__PURE__*/_jsxDEV(Label, {\n      children: \"Search for the Project ID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      styles: searchBoxStyles,\n      placeholder: \"Enter the Project name\",\n      onSearch: onSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(If, {\n      condition: state.projNotFound,\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Project not found! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(If, {\n      condition: state.projListVisible,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"ProjectsList\",\n        children: \" Projects List \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this), projlist.map((proj, index) => {\n        console.log(proj.projectName);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            onClick: setCurrentProject,\n            name: index,\n            children: [proj.projectName, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 37\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 112\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 32\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(If, {\n      condition: state.projDetailsVisible,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"projdetailheader\",\n        children: \" Project Details \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DetailsList, {\n        items: items,\n        setKey: \"set\",\n        layoutMode: DetailsListLayoutMode.justified,\n        selectionMode: SelectionMode.none\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 21\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(If, {\n        condition: state.resources.length > 0,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \" Resources \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DetailsList, {\n          items: resourceDetails,\n          setKey: \"set\",\n          layoutMode: DetailsListLayoutMode.justified,\n          selectionMode: SelectionMode.none\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(If, {\n        condition: state.resources.length == 0,\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \" No resources assigned to the project as of now. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(If, {\n      condition: state.resources.length > 0,\n      children: /*#__PURE__*/_jsxDEV(PrimaryButton, {\n        id: \"Projections\",\n        onClick: showProjections,\n        children: \"Show Projection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(If, {\n      condition: state.shouldShowProjections,\n      children: [/*#__PURE__*/_jsxDEV(DetailsList, {\n        items: billingDetails,\n        setKey: \"set\",\n        layoutMode: DetailsListLayoutMode.justified,\n        selectionMode: SelectionMode.none\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\" Total Bill - $\", state.totalBill]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Search, \"hiZKYbARKd65s8s15VZW2CkYnF8=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/SravsGithub/sravsrepo/projections/src/Components/Search.js"],"names":["React","useState","If","Else","Elif","Label","Link","PrimaryButton","List","SearchBox","ISearchBoxStyles","DetailsList","DetailsListLayoutMode","SelectionMode","Selection","IColumn","monthNames","_MS_PER_DAY","listofholidays","Search","projlist","setProjlist","resourceDetails","setResourceDetails","billingDetails","setBillingDetails","items","setItems","searchBoxStyles","root","width","state","setState","searchString","projectID","projectName","description","startDate","Date","endDate","projListVisible","projDetailsVisible","resources","projNotFound","shouldShowProjections","totalBill","poStatus","poValue","poNum","origPoNum","poType","projType","salesSegment","cluster","clientPartner","accountManager","cdmName","UpdateItems","toString","resDetails","map","res","push","resourceName","billing","useEffect","setCurrentProject","e","project","target","name","prevstate","parse","projectType","poNumber","orginalPoNumber","onSubmit","url","fetch","method","then","response","json","projects","console","log","length","prevState","catch","err","alert","computeWorkingDaysBetweenTwoDays","millisecondsPerDay","setHours","diff","days","Math","ceil","weeks","floor","startDay","getDay","endDay","forEach","day","showProjections","holidays","holiday","holidayDate","a","b","start","end","getFullYear","getMonth","total","billDetails","year","diffDays","month","proj","index","justified","none"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,cAAP;AACA,SAASC,EAAT,EAAaC,IAAb,EAAmBC,IAAnB,QAA+B,YAA/B;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,aAAtB,EAAqCC,IAArC,QAAiD,wBAAjD;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,sCAA5C;AACA,SAASC,WAAT,EAAsBC,qBAAtB,EAA6CC,aAA7C,EAA4DC,SAA5D,EAAuEC,OAAvE,QAAsF,wCAAtF;AAEA,MAAMC,UAAU,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EACjB,MADiB,EACT,QADS,EACC,WADD,EACc,SADd,EACyB,UADzB,EACqC,UADrC,CAAnB;;AAIA,MAAMC,WAAW,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArC,C,CACA;;;AACA,IAAIC,cAAc,GAAG,EAArB;;AACA,SAASC,MAAT,GAAiB;AAAA;;AAEb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACqB,eAAD,EAAkBC,kBAAlB,IAAyCtB,QAAQ,CAAC,EAAD,CAAvD;AACA,QAAM,CAACuB,cAAD,EAAiBC,iBAAjB,IAAsCxB,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACyB,KAAD,EAAQC,QAAR,IAAoB1B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM2B,eAAe,GAAG;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AAAR,GAAxB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB/B,QAAQ,CAAC;AAC/BgC,IAAAA,YAAY,EAAE,EADiB;AAE/BC,IAAAA,SAAS,EAAE,EAFoB;AAG/BC,IAAAA,WAAW,EAAG,EAHiB;AAI/BC,IAAAA,WAAW,EAAG,EAJiB;AAK/BC,IAAAA,SAAS,EAAG,IAAIC,IAAJ,EALmB;AAM/BC,IAAAA,OAAO,EAAG,IAAID,IAAJ,EANqB;AAO/BE,IAAAA,eAAe,EAAE,KAPc;AAQ/BC,IAAAA,kBAAkB,EAAE,KARW;AAS/BC,IAAAA,SAAS,EAAE,EAToB;AAU/BC,IAAAA,YAAY,EAAE,KAViB;AAW/BC,IAAAA,qBAAqB,EAAE,KAXQ;AAY/BC,IAAAA,SAAS,EAAE,CAZoB;AAa/BC,IAAAA,QAAQ,EAAC,QAbsB;AAc/BC,IAAAA,OAAO,EAAE,EAdsB;AAe/BC,IAAAA,KAAK,EAAE,EAfwB;AAgB/BC,IAAAA,SAAS,EAAE,EAhBoB;AAiB/BC,IAAAA,MAAM,EAAE,KAjBuB;AAkB/BC,IAAAA,QAAQ,EAAE,KAlBqB;AAmB/BC,IAAAA,YAAY,EAAE,EAnBiB;AAoB/BC,IAAAA,OAAO,EAAE,EApBsB;AAqB/BC,IAAAA,aAAa,EAAE,EArBgB;AAsB/BC,IAAAA,cAAc,EAAE,EAtBe;AAuB/BC,IAAAA,OAAO,EAAE;AAvBsB,GAAD,CAAlC;;AA0BA,WAASC,WAAT,GACA;AACI9B,IAAAA,QAAQ,CAAE,CACN;AACI,eAAS,WADb;AAEI,eAASI,KAAK,CAACiB;AAFnB,KADM,EAKN;AACI,eAAS,MADb;AAEI,eAASjB,KAAK,CAACI;AAFnB,KALM,EAQH;AACC,eAAS,aADV;AAEC,eAASJ,KAAK,CAACK;AAFhB,KARG,EAWH;AACC,eAAS,YADV;AAEC,eAASL,KAAK,CAACM,SAAN,CAAgBqB,QAAhB;AAFV,KAXG,EAcH;AACC,eAAS,UADV;AAEC,eAAS3B,KAAK,CAACQ,OAAN,CAAcmB,QAAd;AAFV,KAdG,EAiBH;AACC,eAAS,oBADV;AAEC,eAAS3B,KAAK,CAACkB;AAFhB,KAjBG,EAoBH;AACC,eAAS,mBADV;AAEC,eAASlB,KAAK,CAACe;AAFhB,KApBG,EAuBH;AACC,eAAS,UADV;AAEC,eAASf,KAAK,CAACgB;AAFhB,KAvBG,EA0BH;AACC,eAAS,SADV;AAEC,eAAShB,KAAK,CAACmB;AAFhB,KA1BG,EA6BH;AACC,eAAS,cADV;AAEC,eAASnB,KAAK,CAACoB;AAFhB,KA7BG,EAgCH;AACC,eAAS,gBADV;AAEC,eAASpB,KAAK,CAACqB;AAFhB,KAhCG,EAmCH;AACC,eAAS,UADV;AAEC,eAASrB,KAAK,CAACsB;AAFhB,KAnCG,EAsCH;AACC,eAAS,oBADV;AAEC,eAAStB,KAAK,CAACuB;AAFhB,KAtCG,EAyCH;AACC,eAAS,qBADV;AAEC,eAASvB,KAAK,CAACwB;AAFhB,KAzCG,EA4CH;AACC,eAAS,UADV;AAEC,eAASxB,KAAK,CAACyB;AAFhB,KA5CG,CAAF,CAAR;AAiDA,QAAIG,UAAU,GAAG,EAAjB;AACA5B,IAAAA,KAAK,CAACW,SAAN,CAAgBkB,GAAhB,CAAoBC,GAAG,IAAG;AACtBF,MAAAA,UAAU,CAACG,IAAX,CACI;AACI,wBAAgBD,GAAG,CAACE,YADxB;AAEI,0BAAkBF,GAAG,CAACG;AAF1B,OADJ;AAMH,KAPD;AAQAzC,IAAAA,kBAAkB,CAACoC,UAAD,CAAlB;AACH;;AAED3D,EAAAA,KAAK,CAACiE,SAAN,CAAgB,MAAM;AAClBR,IAAAA,WAAW;AACZ,GAFH,EAEK,CAAC1B,KAAD,CAFL;;AAIA,WAASmC,iBAAT,CAA2BC,CAA3B,EAA8B;AAC1B,QAAIC,OAAO,GAAGhD,QAAQ,CAAC+C,CAAC,CAACE,MAAF,CAASC,IAAV,CAAtB;AACAtC,IAAAA,QAAQ,CAACuC,SAAS,IACd;AAAC,aAAM,EAAC,GAAGA,SAAJ;AACL3B,QAAAA,qBAAqB,EAAE,KADlB;AAELT,QAAAA,WAAW,EAAEiC,OAAO,CAACjC,WAFhB;AAGLE,QAAAA,SAAS,EAAE,IAAIC,IAAJ,CAASA,IAAI,CAACkC,KAAL,CAAWJ,OAAO,CAAC/B,SAAnB,CAAT,CAHN;AAILE,QAAAA,OAAO,EAAE,IAAID,IAAJ,CAASA,IAAI,CAACkC,KAAL,CAAWJ,OAAO,CAAC7B,OAAnB,CAAT,CAJJ;AAKLH,QAAAA,WAAW,EAAEgC,OAAO,CAAChC,WALhB;AAMLM,QAAAA,SAAS,EAAE0B,OAAO,CAAC1B,SANd;AAOLI,QAAAA,QAAQ,EAAEsB,OAAO,CAACtB,QAAR,IAAoB,CAApB,GAAwB,QAAxB,GAAmC,UAPxC;AAQLC,QAAAA,OAAO,EAAEqB,OAAO,CAACrB,OARZ;AASLG,QAAAA,MAAM,EAAEkB,OAAO,CAAClB,MAAR,IAAkB,CAAlB,GAAsB,KAAtB,GAA8B,SATjC;AAULC,QAAAA,QAAQ,EAAEiB,OAAO,CAACK,WAAR,IAAuB,CAAvB,GAA2B,KAA3B,GAAmC,aAVxC;AAWLzB,QAAAA,KAAK,EAAEoB,OAAO,CAACM,QAXV;AAYLzB,QAAAA,SAAS,EAAEmB,OAAO,CAACO,eAZd;AAaLvB,QAAAA,YAAY,EAAEgB,OAAO,CAAChB,YAbjB;AAcLC,QAAAA,OAAO,EAAEe,OAAO,CAACf,OAdZ;AAeLC,QAAAA,aAAa,EAAEc,OAAO,CAACd,aAflB;AAgBLC,QAAAA,cAAc,EAAEa,OAAO,CAACb,cAhBnB;AAiBLC,QAAAA,OAAO,EAAEY,OAAO,CAACZ;AAjBZ,OAAN;AAmBA,KApBG,CAAR;AAsBH;;AAED,WAASoB,QAAT,CAAkB3C,YAAlB,EAAgC;AAC5B;AACA,UAAM4C,GAAG,GAAG,8IAA4I5C,YAAxJ,CAF4B,CAG5B;;AAGA6C,IAAAA,KAAK,CAACD,GAAD,EAAM;AACLE,MAAAA,MAAM,EAAG;AADJ,KAAN,CAAL,CAEOC,IAFP,CAEYC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFxB,EAGMF,IAHN,CAGWG,QAAQ,IAAI;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,UAAGA,QAAQ,CAACG,MAAT,IAAmB,CAAtB,EACA;AACIjE,QAAAA,WAAW,CAAC8D,QAAD,CAAX;AAEL;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEgBnD,QAAAA,QAAQ,CAACuD,SAAS,IACd;AAAC,iBAAO,EAAC,GAAGA,SAAJ;AACJ/C,YAAAA,eAAe,EAAE,IADb;AAENG,YAAAA,YAAY,EAAE;AAFR,WAAP;AAGC,SAJE,CAAR;AAKC,OAlCD,MAmCI;AACAX,QAAAA,QAAQ,CAACuC,SAAS,IACd;AAAC,iBAAM,EAAC,GAAGA,SAAJ;AACH5B,YAAAA,YAAY,EAAE,IADX;AAEHH,YAAAA,eAAe,EAAE,KAFd;AAGHC,YAAAA,kBAAkB,EAAE,KAHjB;AAIHG,YAAAA,qBAAqB,EAAE;AAJpB,WAAN;AAKA,SANG,CAAR;AAOH;AAEJ,KAlDL,EAkDO4C,KAlDP,CAkDaC,GAAG,IAAI;AAACC,MAAAA,KAAK,CAACD,GAAD,CAAL;AAAW,KAlDhC;AAmDD;;AAEF,WAASE,gCAAT,CAA0CtD,SAA1C,EAAqDE,OAArD,EAA8D;AAE7D;AACE,QAAIA,OAAO,IAAIF,SAAf,EAA0B;AACxB,aAAO,CAAP;AACD,KAL0D,CAO7D;;;AACE,QAAIuD,kBAAkB,GAAG,QAAQ,IAAjC,CAR2D,CAQpB;;AACvCvD,IAAAA,SAAS,CAACwD,QAAV,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAT2D,CAS1B;;AACjCtD,IAAAA,OAAO,CAACsD,QAAR,CAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,GAA7B,EAV2D,CAUvB;;AACpC,QAAIC,IAAI,GAAGvD,OAAO,GAAGF,SAArB,CAX2D,CAW1B;;AACjC,QAAI0D,IAAI,GAAGC,IAAI,CAACC,IAAL,CAAUH,IAAI,GAAGF,kBAAjB,CAAX,CAZ2D,CAc3D;;AACA,QAAIM,KAAK,GAAGF,IAAI,CAACG,KAAL,CAAWJ,IAAI,GAAG,CAAlB,CAAZ;AACAA,IAAAA,IAAI,IAAIG,KAAK,GAAG,CAAhB,CAhB2D,CAkB3D;;AACA,QAAIE,QAAQ,GAAG/D,SAAS,CAACgE,MAAV,EAAf;AACA,QAAIC,MAAM,GAAG/D,OAAO,CAAC8D,MAAR,EAAb,CApB2D,CAsB3D;;AACA,QAAID,QAAQ,GAAGE,MAAX,GAAoB,CAAxB,EAA2B;AACzBP,MAAAA,IAAI,IAAI,CAAR;AACD,KAzB0D,CA0B3D;;;AACA,QAAIK,QAAQ,IAAI,CAAZ,IAAiBE,MAAM,IAAI,CAA/B,EAAkC;AAChCP,MAAAA,IAAI;AACL,KA7B0D,CA8B3D;;;AACA,QAAIO,MAAM,IAAI,CAAV,IAAeF,QAAQ,IAAI,CAA/B,EAAkC;AAChCL,MAAAA,IAAI;AACL;AAED;;;AACA7E,IAAAA,cAAc,CAACqF,OAAf,CAAuBC,GAAG,IAAI;AAC1BpB,MAAAA,OAAO,CAACC,GAAR,CAAYmB,GAAG,GAAG,MAAN,GAAenE,SAAf,GAA2B,MAA3B,GAAoCE,OAAhD;;AACF,UAAKiE,GAAG,IAAInE,SAAR,IAAuBmE,GAAG,IAAIjE,OAAlC,EAA4C;AACxCwD,QAAAA,IAAI;AACP;AACF,KALD;AAMA,WAAOA,IAAP;AACF;;AAEA,WAASU,eAAT,GAA2B;AAEzB;AACA,UAAM5B,GAAG,GAAG,mIAAZ;AACAC,IAAAA,KAAK,CAACD,GAAD,EAAM;AACPE,MAAAA,MAAM,EAAG;AADF,KAAN,CAAL,CAEKC,IAFL,CAEUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFtB,EAGIF,IAHJ,CAGS0B,QAAQ,IAAI;AACftB,MAAAA,OAAO,CAACC,GAAR,CAAYqB,QAAZ;AACAA,MAAAA,QAAQ,CAAC9C,GAAT,CAAa+C,OAAO,IAClB;AACIzF,QAAAA,cAAc,CAAC4C,IAAf,CAAoB,IAAIxB,IAAJ,CAASA,IAAI,CAACkC,KAAL,CAAWmC,OAAO,CAACC,WAAnB,CAAT,CAApB;AACH,OAHH;AAIAxB,MAAAA,OAAO,CAACC,GAAR,CAAYnE,cAAZ;AAEA,UAAI8C,OAAO,GAAG,CAAd;AACAjC,MAAAA,KAAK,CAACW,SAAN,CAAgBkB,GAAhB,CAAoBC,GAAG,IAAG;AACtBG,QAAAA,OAAO,IAAGH,GAAG,CAACG,OAAd;AACH,OAFD;AAGA,UAAI6C,CAAC,GAAG9E,KAAK,CAACM,SAAd;AACA,UAAIyE,CAAC,GAAG/E,KAAK,CAACQ,OAAd;AAEA,UAAIwE,KAAK,GAAGhF,KAAK,CAACM,SAAlB;AACA,UAAI2E,GAAG,GAAG,IAAI1E,IAAJ,CAASuE,CAAC,CAACI,WAAF,EAAT,EAA0BJ,CAAC,CAACK,QAAF,KAAe,CAAzC,EAA4C,CAA5C,CAAV;AACAF,MAAAA,GAAG,GAAIA,GAAG,GAAGjF,KAAK,CAACQ,OAAb,GAAwBR,KAAK,CAACQ,OAA9B,GAAuCyE,GAA7C;AACA,UAAIG,KAAK,GAAG,CAAZ;AACA,UAAIC,WAAW,GAAG,EAAlB;AACA,UAAIC,IAAI,GAAGR,CAAC,CAACI,WAAF,EAAX;;AACA,aAAOD,GAAG,IAAID,KAAd,EACA;AACI,YAAIO,QAAQ,GAAG3B,gCAAgC,CAACoB,KAAD,EAAQC,GAAR,CAA/C;AACAG,QAAAA,KAAK,IAAInD,OAAO,GAACsD,QAAjB;AACAF,QAAAA,WAAW,CAACtD,IAAZ,CACI;AACE,mBAAS9C,UAAU,CAAC+F,KAAK,CAACG,QAAN,EAAD,CAAV,GAA+B,GAA/B,GAAqCH,KAAK,CAACE,WAAN,EADhD;AAEE,0BAAgBK,QAFlB;AAGE,0BAAgB,MAAKtD,OAAO,GAACsD;AAH/B,SADJ;AAOA,YAAIC,KAAK,GAAGR,KAAK,CAACG,QAAN,MAAoB,EAApB,GAAyB,CAAC,CAA1B,GAA8BH,KAAK,CAACG,QAAN,EAA1C;AACAG,QAAAA,IAAI,GAAGN,KAAK,CAACG,QAAN,MAAoB,EAApB,GAAyBG,IAAI,GAAC,CAA9B,GAAiCA,IAAxC;AACAN,QAAAA,KAAK,GAAG,IAAIzE,IAAJ,CAAS+E,IAAT,EAAeE,KAAK,GAAG,CAAvB,EAA0B,CAA1B,CAAR;AACAP,QAAAA,GAAG,GAAG,IAAI1E,IAAJ,CAAS+E,IAAT,EAAeN,KAAK,CAACG,QAAN,KAAiB,CAAhC,EAAmC,CAAnC,CAAN;AACAF,QAAAA,GAAG,GAAIA,GAAG,GAAGjF,KAAK,CAACQ,OAAb,GAAwBR,KAAK,CAACQ,OAA9B,GAAuCyE,GAA7C;AACJ;;AAEDhF,MAAAA,QAAQ,CAACuC,SAAS,IAAI;AACjB,eAAM,EAAC,GAAGA,SAAJ;AAAc1B,UAAAA,SAAS,EAAGsE,KAA1B;AACFvE,UAAAA,qBAAqB,EAAE;AADrB,SAAN;AAGH,OAJM,CAAR;AAKCnB,MAAAA,iBAAiB,CAAC2F,WAAD,CAAjB;AACH,KAhDH;AAkDD;;AAEC,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,SAAD;AACI,MAAA,MAAM,EAAExF,eADZ;AAEI,MAAA,WAAW,EAAC,wBAFhB;AAGI,MAAA,QAAQ,EAAEgD;AAHd;AAAA;AAAA;AAAA;AAAA,YAFJ,eAQI,QAAC,EAAD;AAAI,MAAA,SAAS,EAAE7C,KAAK,CAACY,YAArB;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YARJ,eAYI,QAAC,EAAD;AAAI,MAAA,SAAS,EAAEZ,KAAK,CAACS,eAArB;AAAA,8BACA;AAAI,QAAA,SAAS,EAAG,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,EAGIpB,QAAQ,CAACwC,GAAT,CAAa,CAAC4D,IAAD,EAAQC,KAAR,KAAiB;AAC1BrC,QAAAA,OAAO,CAACC,GAAR,CAAYmC,IAAI,CAACrF,WAAjB;AACA,4BAAO;AAAA,kCAAK,QAAC,IAAD;AAAM,YAAA,OAAO,EAAE+B,iBAAf;AAAkC,YAAA,IAAI,EAAGuD,KAAzC;AAAA,uBAAiDD,IAAI,CAACrF,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAL,oBAAgF;AAAA;AAAA;AAAA;AAAA,kBAAhF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAHD,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ,eAsBI,QAAC,EAAD;AAAI,MAAA,SAAS,EAAEJ,KAAK,CAACU,kBAArB;AAAA,8BAOA;AAAI,QAAA,SAAS,EAAG,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPA,eAQI,QAAC,WAAD;AACI,QAAA,KAAK,EAAEf,KADX;AAEI,QAAA,MAAM,EAAC,KAFX;AAGI,QAAA,UAAU,EAAEd,qBAAqB,CAAC8G,SAHtC;AAII,QAAA,aAAa,EAAE7G,aAAa,CAAC8G;AAJjC;AAAA;AAAA;AAAA;AAAA,cARJ,oBAaO;AAAA;AAAA;AAAA;AAAA,cAbP,eAcI,QAAC,EAAD;AAAI,QAAA,SAAS,EAAE5F,KAAK,CAACW,SAAN,CAAgB4C,MAAhB,GAAyB,CAAxC;AAAA,gCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA,QAAC,WAAD;AACI,UAAA,KAAK,EAAEhE,eADX;AAEI,UAAA,MAAM,EAAC,KAFX;AAGI,UAAA,UAAU,EAAEV,qBAAqB,CAAC8G,SAHtC;AAII,UAAA,aAAa,EAAE7G,aAAa,CAAC8G;AAJjC;AAAA;AAAA;AAAA;AAAA,gBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdJ,eAuBI,QAAC,EAAD;AAAI,QAAA,SAAS,EAAE5F,KAAK,CAACW,SAAN,CAAgB4C,MAAhB,IAA0B,CAAzC;AAAA,+BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAvBJ,eA0BI;AAAA;AAAA;AAAA;AAAA,cA1BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAtBJ,eAkDI,QAAC,EAAD;AAAI,MAAA,SAAS,EAAEvD,KAAK,CAACW,SAAN,CAAgB4C,MAAhB,GAAyB,CAAxC;AAAA,6BACC,QAAC,aAAD;AAAe,QAAA,EAAE,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAEmB,eAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAlDJ,eAqDI;AAAA;AAAA;AAAA;AAAA,YArDJ,eAsDI,QAAC,EAAD;AAAI,MAAA,SAAS,EAAE1E,KAAK,CAACa,qBAArB;AAAA,8BACA,QAAC,WAAD;AACQ,QAAA,KAAK,EAAEpB,cADf;AAEQ,QAAA,MAAM,EAAC,KAFf;AAGQ,QAAA,UAAU,EAAEZ,qBAAqB,CAAC8G,SAH1C;AAIQ,QAAA,aAAa,EAAE7G,aAAa,CAAC8G;AAJrC;AAAA;AAAA;AAAA;AAAA,cADA,eAOI;AAAA,sCAAoB5F,KAAK,CAACc,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAtDJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkEP;;GAhWQ1B,M;;KAAAA,M;AAkWT,eAAeA,MAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport './Search.css';\r\nimport { If, Else, Elif } from 'rc-if-else';\r\nimport { Label, Link, PrimaryButton, List } from 'office-ui-fabric-react';\r\nimport { SearchBox, ISearchBoxStyles } from 'office-ui-fabric-react/lib/SearchBox';\r\nimport { DetailsList, DetailsListLayoutMode, SelectionMode, Selection, IColumn } from 'office-ui-fabric-react/lib/DetailsList';\r\n\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\n\r\nconst _MS_PER_DAY = 1000 * 60 * 60 * 24;\r\n//const holidays = [new Date(2021,1,19), new Date(2021,4,28)];\r\nvar listofholidays = []\r\nfunction Search(){\r\n\r\n    const [projlist, setProjlist] = useState([]);\r\n    const [resourceDetails, setResourceDetails ] = useState([]);\r\n    const [billingDetails, setBillingDetails] = useState([]);\r\n    const [items, setItems] = useState([]);\r\n    const searchBoxStyles = { root: { width: 200 } };\r\n    const [state, setState] = useState({\r\n        searchString: \"\",\r\n        projectID: \"\",\r\n        projectName : \"\",\r\n        description : \"\",\r\n        startDate : new Date(),\r\n        endDate : new Date(),\r\n        projListVisible: false,\r\n        projDetailsVisible: false,\r\n        resources: [],\r\n        projNotFound: false,\r\n        shouldShowProjections: false,\r\n        totalBill: 0,\r\n        poStatus:\"active\",\r\n        poValue: \"\",\r\n        poNum: \"\",\r\n        origPoNum: \"\",\r\n        poType: \"sow\",\r\n        projType: \"t&m\",\r\n        salesSegment: \"\",\r\n        cluster: \"\",\r\n        clientPartner: \"\",\r\n        accountManager: \"\",\r\n        cdmName: \"\"\r\n      });\r\n\r\n    function UpdateItems()\r\n    {\r\n        setItems( [\r\n            {\r\n                \"Field\": \"PO Number\",\r\n                \"Value\": state.poNum\r\n            },\r\n            {\r\n                \"Field\": \"Name\",\r\n                \"Value\": state.projectName\r\n            }, {\r\n                \"Field\": \"Description\",\r\n                \"Value\": state.description\r\n            }, {\r\n                \"Field\": \"Start Date\",\r\n                \"Value\": state.startDate.toString()\r\n            }, {\r\n                \"Field\": \"End Date\",\r\n                \"Value\": state.endDate.toString()\r\n            }, {\r\n                \"Field\": \"Original PO Number\",\r\n                \"Value\": state.origPoNum\r\n            }, {\r\n                \"Field\": \"PO Current Status\",\r\n                \"Value\": state.poStatus\r\n            }, {\r\n                \"Field\": \"PO Value\",\r\n                \"Value\": state.poValue\r\n            }, {\r\n                \"Field\": \"PO Type\",\r\n                \"Value\": state.poType\r\n            }, {\r\n                \"Field\": \"Project Type\",\r\n                \"Value\": state.projType\r\n            }, {\r\n                \"Field\": \"sSales Segment\",\r\n                \"Value\": state.salesSegment\r\n            }, {\r\n                \"Field\": \"Cluster \",\r\n                \"Value\": state.cluster\r\n            }, {\r\n                \"Field\": \"Client Partner(L1)\",\r\n                \"Value\": state.clientPartner\r\n            }, {\r\n                \"Field\": \"Account Manager(L2)\",\r\n                \"Value\": state.accountManager\r\n            }, {\r\n                \"Field\": \"CDM Name\",\r\n                \"Value\": state.cdmName\r\n            }\r\n        ]);\r\n        var resDetails = [];\r\n        state.resources.map(res =>{\r\n            resDetails.push(\r\n                {\r\n                    \"ResourceName\": res.resourceName,\r\n                    \"Billing (/day)\": res.billing,\r\n                }\r\n            )   \r\n        } ) \r\n        setResourceDetails(resDetails) ;\r\n    }\r\n    \r\n    React.useEffect(() => {\r\n        UpdateItems();\r\n      }, [state]);\r\n\r\n    function setCurrentProject(e) {\r\n        var project = projlist[e.target.name]\r\n        setState(prevstate =>\r\n            {return{...prevstate,\r\n              shouldShowProjections: false,\r\n              projectName: project.projectName,\r\n              startDate: new Date(Date.parse(project.startDate)),\r\n              endDate: new Date(Date.parse(project.endDate)),\r\n              description: project.description,\r\n              resources: project.resources,\r\n              poStatus: project.poStatus == 0 ? \"Active\" : \"Inactive\",\r\n              poValue: project.poValue,\r\n              poType: project.poType == 0 ? \"SOW\" : \"Beeline\",\r\n              projType: project.projectType == 0 ? \"T&M\" : \"Fixed Price\",\r\n              poNum: project.poNumber,\r\n              origPoNum: project.orginalPoNumber,\r\n              salesSegment: project.salesSegment,\r\n              cluster: project.cluster,\r\n              clientPartner: project.clientPartner,\r\n              accountManager: project.accountManager,\r\n              cdmName: project.cdmName\r\n            }\r\n            }\r\n        );\r\n    }\r\n\r\n    function onSubmit(searchString) {\r\n        //e.preventDefault();\r\n        const url = \"https://projectionsazurefunctions.azurewebsites.net/api/Search?code=CbTDUtF5NSctIKh/jP6BmrifZ17wiSyQvqc0COv0G1ybdouglcICWw==&ProjectName=\"+searchString;\r\n        //const url = \"http://localhost:7071/api/Search?ProjectName=\"+searchString;\r\n        \r\n\r\n        fetch(url, {\r\n              method : \"GET\",\r\n            }).then(response => response.json()\r\n            ).then(projects => {\r\n                console.log(projects)\r\n                if(projects.length != 0)\r\n                {\r\n                    setProjlist(projects)\r\n                \r\n               /* if(project.poNumber != 0)\r\n                {\r\n\r\n                setState(prevstate =>\r\n                    {return{...prevstate,\r\n                      shouldShowProjections: false,\r\n                      projectName: project.projectName,\r\n                      startDate: new Date(Date.parse(project.startDate)),\r\n                      endDate: new Date(Date.parse(project.endDate)),\r\n                      description: project.description,\r\n                      resources: project.resources,\r\n                      poStatus: project.poStatus == 0 ? \"Active\" : \"Inactive\",\r\n                      poValue: project.poValue,\r\n                      poType: project.poType == 0 ? \"SOW\" : \"Beeline\",\r\n                      projType: project.projectType == 0 ? \"T&M\" : \"Fixed Price\",\r\n                      poNum: project.poNumber,\r\n                      origPoNum: project.orginalPoNumber,\r\n                      salesSegment: project.salesSegment,\r\n                      cluster: project.cluster,\r\n                      clientPartner: project.clientPartner,\r\n                      accountManager: project.accountManager,\r\n                      cdmName: project.cdmName\r\n                    }\r\n                    }\r\n                );*/\r\n                setState(prevState =>\r\n                    {return {...prevState, \r\n                        projListVisible: true,  \r\n                      projNotFound: false,\r\n                    }})\r\n                }\r\n                else{\r\n                    setState(prevstate =>\r\n                        {return{...prevstate,\r\n                            projNotFound: true,\r\n                            projListVisible: false,\r\n                            projDetailsVisible: false,\r\n                            shouldShowProjections: false}\r\n                        })\r\n                }\r\n\r\n            }).catch(err => {alert(err)});\r\n      }\r\n      \r\n     function computeWorkingDaysBetweenTwoDays(startDate, endDate) {\r\n      \r\n      // Validate input\r\n        if (endDate <= startDate) {\r\n          return 0;\r\n        }\r\n      \r\n      // Calculate days between dates\r\n        var millisecondsPerDay = 86400 * 1000; // Day in milliseconds\r\n        startDate.setHours(0, 0, 0, 1);  // Start just after midnight\r\n        endDate.setHours(23, 59, 59, 999);  // End just before midnight\r\n        var diff = endDate - startDate;  // Milliseconds between datetime objects    \r\n        var days = Math.ceil(diff / millisecondsPerDay);\r\n      \r\n        // Subtract two weekend days for every week in between\r\n        var weeks = Math.floor(days / 7);\r\n        days -= weeks * 2;\r\n      \r\n        // Handle special cases\r\n        var startDay = startDate.getDay();\r\n        var endDay = endDate.getDay();\r\n          \r\n        // Remove weekend not previously removed.   \r\n        if (startDay - endDay > 1) {\r\n          days -= 2;\r\n        }\r\n        // Remove start day if span starts on Sunday but ends before Saturday\r\n        if (startDay == 0 && endDay != 6) {\r\n          days--;  \r\n        }\r\n        // Remove end day if span ends on Saturday but starts after Sunday\r\n        if (endDay == 6 && startDay != 0) {\r\n          days--;\r\n        }\r\n\r\n        /* Here is the code */\r\n        listofholidays.forEach(day => {\r\n            console.log(day + \" -- \" + startDate + \" -- \" + endDate)\r\n          if ((day >= startDate) && (day <= endDate)) {\r\n              days--;\r\n          }\r\n        });\r\n        return days;\r\n     }\r\n\r\n      function showProjections() {\r\n          \r\n        //const url = \"http://localhost:7071/api/search\";\r\n        const url = \"https://projectionsazurefunctions.azurewebsites.net/api/GetHolidays?code=IGZG4SdEVqbHWYhV32asIb8junLY3IttJDVB4KjCjL3aNGyr0L1rOg==\"\r\n        fetch(url, {\r\n            method : \"GET\"\r\n          }).then(response => response.json()\r\n          ).then(holidays => {\r\n              console.log(holidays);\r\n              holidays.map(holiday =>  \r\n                {\r\n                    listofholidays.push(new Date(Date.parse(holiday.holidayDate)))\r\n                });\r\n              console.log(listofholidays)\r\n\r\n              var billing = 0\r\n              state.resources.map(res =>{\r\n                  billing +=res.billing;   \r\n              } )   \r\n              var a = state.startDate;\r\n              var b = state.endDate;\r\n              \r\n              var start = state.startDate;\r\n              var end = new Date(a.getFullYear(), a.getMonth() + 1, 0);\r\n              end = (end > state.endDate) ? state.endDate: end;\r\n              var total = 0;\r\n              var billDetails = [];\r\n              var year = a.getFullYear();\r\n              while (end >= start)\r\n              {\r\n                  var diffDays = computeWorkingDaysBetweenTwoDays(start, end);\r\n                  total += billing*diffDays;\r\n                  billDetails.push(\r\n                      {\r\n                        \"Month\": monthNames[start.getMonth()] + \" \" + start.getFullYear(),\r\n                        \"Working days\": diffDays,\r\n                        \"Monthly Bill\": \"$\"+(billing*diffDays)},\r\n                      )\r\n      \r\n                  var month = start.getMonth() == 11 ? -1 : start.getMonth();\r\n                  year = start.getMonth() == 11 ? year+1: year;\r\n                  start = new Date(year, month + 1, 1);\r\n                  end = new Date(year, start.getMonth()+1, 0);\r\n                  end = (end > state.endDate) ? state.endDate: end;\r\n             }\r\n      \r\n             setState(prevstate => {\r\n                  return{...prevstate,totalBill : total,\r\n                      shouldShowProjections: true,}\r\n                  \r\n              })\r\n              setBillingDetails(billDetails);\r\n          });\r\n\r\n      }\r\n\r\n        return(\r\n            <div className=\"SearchSection\">\r\n                <Label>Search for the Project ID</Label>\r\n                <SearchBox\r\n                    styles={searchBoxStyles}\r\n                    placeholder=\"Enter the Project name\"\r\n                    onSearch={onSubmit}\r\n                />\r\n                \r\n                <If condition={state.projNotFound}>\r\n                    <h3> Project not found! </h3>\r\n                </If>\r\n                \r\n                <If condition={state.projListVisible}>\r\n                <h1 className = \"ProjectsList\"> Projects List </h1>\r\n                {\r\n                    projlist.map((proj , index)=> {\r\n                        console.log(proj.projectName);\r\n                        return <div><Link onClick={setCurrentProject} name= {index}>{proj.projectName} </Link> <br/></div>\r\n                    })\r\n                }\r\n                </If>\r\n\r\n                <If condition={state.projDetailsVisible}>\r\n                {/* <DetailsList\r\n                    items ={projlist}\r\n                    setKey = \"set\"\r\n                    layoutMode={DetailsListLayoutMode.justified}\r\n                    selectionMode={SelectionMode.none}\r\n                /> */}\r\n                <h2 className = \"projdetailheader\"> Project Details </h2>\r\n                    <DetailsList\r\n                        items={items}\r\n                        setKey=\"set\"\r\n                        layoutMode={DetailsListLayoutMode.justified}\r\n                        selectionMode={SelectionMode.none}\r\n                    /> <br/>\r\n                    <If condition={state.resources.length > 0}>\r\n                    <h3> Resources </h3>\r\n                    <DetailsList\r\n                        items={resourceDetails}\r\n                        setKey=\"set\"\r\n                        layoutMode={DetailsListLayoutMode.justified}\r\n                        selectionMode={SelectionMode.none}\r\n                    /> \r\n                    </If>\r\n                    <If condition={state.resources.length == 0}>\r\n                    <h3> No resources assigned to the project as of now. </h3>\r\n                    </If>\r\n                    <br/>\r\n                </If>\r\n                <If condition={state.resources.length > 0}>\r\n                 <PrimaryButton id=\"Projections\" onClick={showProjections}>Show Projection</PrimaryButton>\r\n                </If>\r\n                <br></br>\r\n                <If condition={state.shouldShowProjections} >\r\n                <DetailsList\r\n                        items={billingDetails}\r\n                        setKey=\"set\"\r\n                        layoutMode={DetailsListLayoutMode.justified}\r\n                        selectionMode={SelectionMode.none}\r\n                    /> \r\n                    <h3> Total Bill - ${state.totalBill}</h3>\r\n                </If>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default Search;"]},"metadata":{},"sourceType":"module"}