'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

/**
 * clone elements child
 * @param {Object} props
 * @returns {ReactElement} child with props
 */

var cloneChildrenWithProps = function cloneChildrenWithProps(children, props) {
  var condition = props.condition,
      withinIf = props.withinIf,
      newProps = _objectWithoutProperties(props, ["condition", "withinIf"]);

  return React.createElement(React.Fragment, null, React.Children.map(children, function (child) {
    if (typeof child === 'string' || !child.type) {
      return child;
    }

    if (child.type === ElIf || child.type === Else) {
      return React.cloneElement(child, _objectSpread({
        withinIf: withinIf
      }, props), child.props.children);
    }

    return React.cloneElement(child, newProps, child.props.children);
  }));
};

var If =
/*#__PURE__*/
function (_React$Component) {
  _inherits(If, _React$Component);

  function If() {
    _classCallCheck(this, If);

    return _possibleConstructorReturn(this, _getPrototypeOf(If).apply(this, arguments));
  }

  _createClass(If, [{
    key: "render",
    value: function render() {
      var children = React.Children.toArray(this.props.children);
      var conditionalRendering;

      if (this.props.condition) {
        // render without <ElIf> and <Else>
        conditionalRendering = children.filter(function (child) {
          return child.type !== ElIf && child.type !== Else;
        });
      } else {
        // find <ElIf> with `condition==true`;
        var validElif = children.find(function (child) {
          return child.type === ElIf && child.props.condition;
        }); // if not exist valid <ElIf>, find <Else>

        conditionalRendering = validElif || children.find(function (child) {
          return child.type === Else;
        });
      }

      return conditionalRendering ? cloneChildrenWithProps(conditionalRendering, _objectSpread({
        withinIf: true
      }, this.props)) : null;
    }
  }]);

  return If;
}(React.Component);
var ElIf =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(ElIf, _React$Component2);

  function ElIf() {
    _classCallCheck(this, ElIf);

    return _possibleConstructorReturn(this, _getPrototypeOf(ElIf).apply(this, arguments));
  }

  _createClass(ElIf, [{
    key: "render",
    value: function render() {
      if (!this.props.withinIf) {
        // <ElIf> should be a nested child of <If> component
        return null;
      }

      return cloneChildrenWithProps(this.props.children, this.props);
    }
  }]);

  return ElIf;
}(React.Component);
var Else =
/*#__PURE__*/
function (_React$Component3) {
  _inherits(Else, _React$Component3);

  function Else() {
    _classCallCheck(this, Else);

    return _possibleConstructorReturn(this, _getPrototypeOf(Else).apply(this, arguments));
  }

  _createClass(Else, [{
    key: "render",
    value: function render() {
      if (!this.props.withinIf) {
        // <Else> should be a nested child of <If> component
        return null;
      }

      return cloneChildrenWithProps(this.props.children, this.props);
    }
  }]);

  return Else;
}(React.Component);

exports.If = If;
exports.ElIf = ElIf;
exports.Else = Else;
