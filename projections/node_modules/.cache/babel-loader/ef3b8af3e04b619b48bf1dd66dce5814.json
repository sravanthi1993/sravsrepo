{"ast":null,"code":"/** @license React v0.15.0\r\n * scheduler.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    var enableSchedulerDebugging = false;\n    var enableIsInputPending = false;\n    var requestIdleCallbackBeforeFirstFrame = false;\n    var requestTimerEventBeforeFirstFrame = false;\n    var enableMessageLoopImplementation = false; // The DOM Scheduler implementation is similar to requestIdleCallback. It\n    // works by scheduling a requestAnimationFrame, storing the time for the start\n    // of the frame, then scheduling a postMessage which gets scheduled after paint.\n    // Within the postMessage handler do as much work as possible until time + frame\n    // rate. By separating the idle call into a separate event tick we ensure that\n    // layout, paint and other browser work is counted against the available time.\n    // The frame rate is dynamically adjusted.\n\n    var requestHostCallback = void 0;\n    var requestHostTimeout = void 0;\n    var cancelHostTimeout = void 0;\n    var shouldYieldToHost = void 0;\n    var requestPaint = void 0;\n    exports.unstable_now = void 0;\n    exports.unstable_forceFrameRate = void 0;\n\n    if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n    // implementation using setTimeout.\n    typeof window === 'undefined' || // Check if MessageChannel is supported, too.\n    typeof MessageChannel !== 'function') {\n      // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n      // fallback to a naive implementation.\n      var _callback = null;\n      var _timeoutID = null;\n\n      var _flushCallback = function () {\n        if (_callback !== null) {\n          try {\n            var currentTime = exports.unstable_now();\n            var hasRemainingTime = true;\n\n            _callback(hasRemainingTime, currentTime);\n\n            _callback = null;\n          } catch (e) {\n            setTimeout(_flushCallback, 0);\n            throw e;\n          }\n        }\n      };\n\n      exports.unstable_now = function () {\n        return Date.now();\n      };\n\n      requestHostCallback = function (cb) {\n        if (_callback !== null) {\n          // Protect against re-entrancy.\n          setTimeout(requestHostCallback, 0, cb);\n        } else {\n          _callback = cb;\n          setTimeout(_flushCallback, 0);\n        }\n      };\n\n      requestHostTimeout = function (cb, ms) {\n        _timeoutID = setTimeout(cb, ms);\n      };\n\n      cancelHostTimeout = function () {\n        clearTimeout(_timeoutID);\n      };\n\n      shouldYieldToHost = function () {\n        return false;\n      };\n\n      requestPaint = exports.unstable_forceFrameRate = function () {};\n    } else {\n      // Capture local references to native APIs, in case a polyfill overrides them.\n      var performance = window.performance;\n      var _Date = window.Date;\n      var _setTimeout = window.setTimeout;\n      var _clearTimeout = window.clearTimeout;\n      var requestAnimationFrame = window.requestAnimationFrame;\n      var cancelAnimationFrame = window.cancelAnimationFrame;\n      var requestIdleCallback = window.requestIdleCallback;\n\n      if (typeof console !== 'undefined') {\n        // TODO: Remove fb.me link\n        if (typeof requestAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n\n        if (typeof cancelAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n      }\n\n      var requestIdleCallbackBeforeFirstFrame$1 = requestIdleCallbackBeforeFirstFrame && typeof requestIdleCallback === 'function' && typeof cancelIdleCallback === 'function';\n      exports.unstable_now = typeof performance === 'object' && typeof performance.now === 'function' ? function () {\n        return performance.now();\n      } : function () {\n        return _Date.now();\n      };\n      var isRAFLoopRunning = false;\n      var isMessageLoopRunning = false;\n      var scheduledHostCallback = null;\n      var rAFTimeoutID = -1;\n      var taskTimeoutID = -1;\n      var frameLength = enableMessageLoopImplementation ? // We won't attempt to align with the vsync. Instead we'll yield multiple\n      // times per frame, often enough to keep it responsive even at really\n      // high frame rates > 120.\n      5 : // Use a heuristic to measure the frame rate and yield at the end of the\n      // frame. We start out assuming that we run at 30fps but then the\n      // heuristic tracking will adjust this value to a faster fps if we get\n      // more frequent animation frames.\n      33.33;\n      var prevRAFTime = -1;\n      var prevRAFInterval = -1;\n      var frameDeadline = 0;\n      var fpsLocked = false; // TODO: Make this configurable\n      // TODO: Adjust this based on priority?\n\n      var maxFrameLength = 300;\n      var needsPaint = false;\n\n      if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {\n        var scheduling = navigator.scheduling;\n\n        shouldYieldToHost = function () {\n          var currentTime = exports.unstable_now();\n\n          if (currentTime >= frameDeadline) {\n            // There's no time left in the frame. We may want to yield control of\n            // the main thread, so the browser can perform high priority tasks. The\n            // main ones are painting and user input. If there's a pending paint or\n            // a pending input, then we should yield. But if there's neither, then\n            // we can yield less often while remaining responsive. We'll eventually\n            // yield regardless, since there could be a pending paint that wasn't\n            // accompanied by a call to `requestPaint`, or other main thread tasks\n            // like network events.\n            if (needsPaint || scheduling.isInputPending()) {\n              // There is either a pending paint or a pending input.\n              return true;\n            } // There's no pending input. Only yield if we've reached the max\n            // frame length.\n\n\n            return currentTime >= frameDeadline + maxFrameLength;\n          } else {\n            // There's still time left in the frame.\n            return false;\n          }\n        };\n\n        requestPaint = function () {\n          needsPaint = true;\n        };\n      } else {\n        // `isInputPending` is not available. Since we have no way of knowing if\n        // there's pending input, always yield at the end of the frame.\n        shouldYieldToHost = function () {\n          return exports.unstable_now() >= frameDeadline;\n        }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n\n        requestPaint = function () {};\n      }\n\n      exports.unstable_forceFrameRate = function (fps) {\n        if (fps < 0 || fps > 125) {\n          console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\n          return;\n        }\n\n        if (fps > 0) {\n          frameLength = Math.floor(1000 / fps);\n          fpsLocked = true;\n        } else {\n          // reset the framerate\n          frameLength = 33.33;\n          fpsLocked = false;\n        }\n      };\n\n      var performWorkUntilDeadline = function () {\n        if (enableMessageLoopImplementation) {\n          if (scheduledHostCallback !== null) {\n            var currentTime = exports.unstable_now(); // Yield after `frameLength` ms, regardless of where we are in the vsync\n            // cycle. This means there's always time remaining at the beginning of\n            // the message event.\n\n            frameDeadline = currentTime + frameLength;\n            var hasTimeRemaining = true;\n\n            try {\n              var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\n              if (!hasMoreWork) {\n                isMessageLoopRunning = false;\n                scheduledHostCallback = null;\n              } else {\n                // If there's more work, schedule the next message event at the end\n                // of the preceding one.\n                port.postMessage(null);\n              }\n            } catch (error) {\n              // If a scheduler task throws, exit the current browser task so the\n              // error can be observed.\n              port.postMessage(null);\n              throw error;\n            }\n          } // Yielding to the browser will give it a chance to paint, so we can\n          // reset this.\n\n\n          needsPaint = false;\n        } else {\n          if (scheduledHostCallback !== null) {\n            var _currentTime = exports.unstable_now();\n\n            var _hasTimeRemaining = frameDeadline - _currentTime > 0;\n\n            try {\n              var _hasMoreWork = scheduledHostCallback(_hasTimeRemaining, _currentTime);\n\n              if (!_hasMoreWork) {\n                scheduledHostCallback = null;\n              }\n            } catch (error) {\n              // If a scheduler task throws, exit the current browser task so the\n              // error can be observed, and post a new task as soon as possible\n              // so we can continue where we left off.\n              port.postMessage(null);\n              throw error;\n            }\n          } // Yielding to the browser will give it a chance to paint, so we can\n          // reset this.\n\n\n          needsPaint = false;\n        }\n      };\n\n      var channel = new MessageChannel();\n      var port = channel.port2;\n      channel.port1.onmessage = performWorkUntilDeadline;\n\n      var onAnimationFrame = function (rAFTime) {\n        if (scheduledHostCallback === null) {\n          // No scheduled work. Exit.\n          prevRAFTime = -1;\n          prevRAFInterval = -1;\n          isRAFLoopRunning = false;\n          return;\n        } // Eagerly schedule the next animation callback at the beginning of the\n        // frame. If the scheduler queue is not empty at the end of the frame, it\n        // will continue flushing inside that callback. If the queue *is* empty,\n        // then it will exit immediately. Posting the callback at the start of the\n        // frame ensures it's fired within the earliest possible frame. If we\n        // waited until the end of the frame to post the callback, we risk the\n        // browser skipping a frame and not firing the callback until the frame\n        // after that.\n\n\n        isRAFLoopRunning = true;\n        requestAnimationFrame(function (nextRAFTime) {\n          _clearTimeout(rAFTimeoutID);\n\n          onAnimationFrame(nextRAFTime);\n        }); // requestAnimationFrame is throttled when the tab is backgrounded. We\n        // don't want to stop working entirely. So we'll fallback to a timeout loop.\n        // TODO: Need a better heuristic for backgrounded work.\n\n        var onTimeout = function () {\n          frameDeadline = exports.unstable_now() + frameLength / 2;\n          performWorkUntilDeadline();\n          rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\n        };\n\n        rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\n\n        if (prevRAFTime !== -1 && // Make sure this rAF time is different from the previous one. This check\n        // could fail if two rAFs fire in the same frame.\n        rAFTime - prevRAFTime > 0.1) {\n          var rAFInterval = rAFTime - prevRAFTime;\n\n          if (!fpsLocked && prevRAFInterval !== -1) {\n            // We've observed two consecutive frame intervals. We'll use this to\n            // dynamically adjust the frame rate.\n            //\n            // If one frame goes long, then the next one can be short to catch up.\n            // If two frames are short in a row, then that's an indication that we\n            // actually have a higher frame rate than what we're currently\n            // optimizing. For example, if we're running on 120hz display or 90hz VR\n            // display. Take the max of the two in case one of them was an anomaly\n            // due to missed frame deadlines.\n            if (rAFInterval < frameLength && prevRAFInterval < frameLength) {\n              frameLength = rAFInterval < prevRAFInterval ? prevRAFInterval : rAFInterval;\n\n              if (frameLength < 8.33) {\n                // Defensive coding. We don't support higher frame rates than 120hz.\n                // If the calculated frame length gets lower than 8, it is probably\n                // a bug.\n                frameLength = 8.33;\n              }\n            }\n          }\n\n          prevRAFInterval = rAFInterval;\n        }\n\n        prevRAFTime = rAFTime;\n        frameDeadline = rAFTime + frameLength; // We use the postMessage trick to defer idle work until after the repaint.\n\n        port.postMessage(null);\n      };\n\n      requestHostCallback = function (callback) {\n        scheduledHostCallback = callback;\n\n        if (enableMessageLoopImplementation) {\n          if (!isMessageLoopRunning) {\n            isMessageLoopRunning = true;\n            port.postMessage(null);\n          }\n        } else {\n          if (!isRAFLoopRunning) {\n            // Start a rAF loop.\n            isRAFLoopRunning = true;\n            requestAnimationFrame(function (rAFTime) {\n              if (requestIdleCallbackBeforeFirstFrame$1) {\n                cancelIdleCallback(idleCallbackID);\n              }\n\n              if (requestTimerEventBeforeFirstFrame) {\n                _clearTimeout(idleTimeoutID);\n              }\n\n              onAnimationFrame(rAFTime);\n            }); // If we just missed the last vsync, the next rAF might not happen for\n            // another frame. To claim as much idle time as possible, post a\n            // callback with `requestIdleCallback`, which should fire if there's\n            // idle time left in the frame.\n            //\n            // This should only be an issue for the first rAF in the loop;\n            // subsequent rAFs are scheduled at the beginning of the\n            // preceding frame.\n\n            var idleCallbackID = void 0;\n\n            if (requestIdleCallbackBeforeFirstFrame$1) {\n              idleCallbackID = requestIdleCallback(function onIdleCallbackBeforeFirstFrame() {\n                if (requestTimerEventBeforeFirstFrame) {\n                  _clearTimeout(idleTimeoutID);\n                }\n\n                frameDeadline = exports.unstable_now() + frameLength;\n                performWorkUntilDeadline();\n              });\n            } // Alternate strategy to address the same problem. Scheduler a timer\n            // with no delay. If this fires before the rAF, that likely indicates\n            // that there's idle time before the next vsync. This isn't always the\n            // case, but we'll be aggressive and assume it is, as a trade off to\n            // prevent idle periods.\n\n\n            var idleTimeoutID = void 0;\n\n            if (requestTimerEventBeforeFirstFrame) {\n              idleTimeoutID = _setTimeout(function onTimerEventBeforeFirstFrame() {\n                if (requestIdleCallbackBeforeFirstFrame$1) {\n                  cancelIdleCallback(idleCallbackID);\n                }\n\n                frameDeadline = exports.unstable_now() + frameLength;\n                performWorkUntilDeadline();\n              }, 0);\n            }\n          }\n        }\n      };\n\n      requestHostTimeout = function (callback, ms) {\n        taskTimeoutID = _setTimeout(function () {\n          callback(exports.unstable_now());\n        }, ms);\n      };\n\n      cancelHostTimeout = function () {\n        _clearTimeout(taskTimeoutID);\n\n        taskTimeoutID = -1;\n      };\n    }\n    /* eslint-disable no-var */\n    // TODO: Use symbols?\n\n\n    var ImmediatePriority = 1;\n    var UserBlockingPriority = 2;\n    var NormalPriority = 3;\n    var LowPriority = 4;\n    var IdlePriority = 5; // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n    // Math.pow(2, 30) - 1\n    // 0b111111111111111111111111111111\n\n    var maxSigned31BitInt = 1073741823; // Times out immediately\n\n    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n    var USER_BLOCKING_PRIORITY = 250;\n    var NORMAL_PRIORITY_TIMEOUT = 5000;\n    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n    var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored as a circular, doubly linked list.\n\n    var firstTask = null;\n    var firstDelayedTask = null; // Pausing the scheduler is useful for debugging.\n\n    var isSchedulerPaused = false;\n    var currentTask = null;\n    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\n    var isPerformingWork = false;\n    var isHostCallbackScheduled = false;\n    var isHostTimeoutScheduled = false;\n\n    function scheduler_flushTaskAtPriority_Immediate(callback, didTimeout) {\n      return callback(didTimeout);\n    }\n\n    function scheduler_flushTaskAtPriority_UserBlocking(callback, didTimeout) {\n      return callback(didTimeout);\n    }\n\n    function scheduler_flushTaskAtPriority_Normal(callback, didTimeout) {\n      return callback(didTimeout);\n    }\n\n    function scheduler_flushTaskAtPriority_Low(callback, didTimeout) {\n      return callback(didTimeout);\n    }\n\n    function scheduler_flushTaskAtPriority_Idle(callback, didTimeout) {\n      return callback(didTimeout);\n    }\n\n    function flushTask(task, currentTime) {\n      // Remove the task from the list before calling the callback. That way the\n      // list is in a consistent state even if the callback throws.\n      var next = task.next;\n\n      if (next === task) {\n        // This is the only scheduled task. Clear the list.\n        firstTask = null;\n      } else {\n        // Remove the task from its position in the list.\n        if (task === firstTask) {\n          firstTask = next;\n        }\n\n        var previous = task.previous;\n        previous.next = next;\n        next.previous = previous;\n      }\n\n      task.next = task.previous = null; // Now it's safe to execute the task.\n\n      var callback = task.callback;\n      var previousPriorityLevel = currentPriorityLevel;\n      var previousTask = currentTask;\n      currentPriorityLevel = task.priorityLevel;\n      currentTask = task;\n      var continuationCallback;\n\n      try {\n        var didUserCallbackTimeout = task.expirationTime <= currentTime; // Add an extra function to the callstack. Profiling tools can use this\n        // to infer the priority of work that appears higher in the stack.\n\n        switch (currentPriorityLevel) {\n          case ImmediatePriority:\n            continuationCallback = scheduler_flushTaskAtPriority_Immediate(callback, didUserCallbackTimeout);\n            break;\n\n          case UserBlockingPriority:\n            continuationCallback = scheduler_flushTaskAtPriority_UserBlocking(callback, didUserCallbackTimeout);\n            break;\n\n          case NormalPriority:\n            continuationCallback = scheduler_flushTaskAtPriority_Normal(callback, didUserCallbackTimeout);\n            break;\n\n          case LowPriority:\n            continuationCallback = scheduler_flushTaskAtPriority_Low(callback, didUserCallbackTimeout);\n            break;\n\n          case IdlePriority:\n            continuationCallback = scheduler_flushTaskAtPriority_Idle(callback, didUserCallbackTimeout);\n            break;\n        }\n      } catch (error) {\n        throw error;\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n        currentTask = previousTask;\n      } // A callback may return a continuation. The continuation should be scheduled\n      // with the same priority and expiration as the just-finished callback.\n\n\n      if (typeof continuationCallback === 'function') {\n        var expirationTime = task.expirationTime;\n        var continuationTask = task;\n        continuationTask.callback = continuationCallback; // Insert the new callback into the list, sorted by its timeout. This is\n        // almost the same as the code in `scheduleCallback`, except the callback\n        // is inserted into the list *before* callbacks of equal timeout instead\n        // of after.\n\n        if (firstTask === null) {\n          // This is the first callback in the list.\n          firstTask = continuationTask.next = continuationTask.previous = continuationTask;\n        } else {\n          var nextAfterContinuation = null;\n          var t = firstTask;\n\n          do {\n            if (expirationTime <= t.expirationTime) {\n              // This task times out at or after the continuation. We will insert\n              // the continuation *before* this task.\n              nextAfterContinuation = t;\n              break;\n            }\n\n            t = t.next;\n          } while (t !== firstTask);\n\n          if (nextAfterContinuation === null) {\n            // No equal or lower priority task was found, which means the new task\n            // is the lowest priority task in the list.\n            nextAfterContinuation = firstTask;\n          } else if (nextAfterContinuation === firstTask) {\n            // The new task is the highest priority task in the list.\n            firstTask = continuationTask;\n          }\n\n          var _previous = nextAfterContinuation.previous;\n          _previous.next = nextAfterContinuation.previous = continuationTask;\n          continuationTask.next = nextAfterContinuation;\n          continuationTask.previous = _previous;\n        }\n      }\n    }\n\n    function advanceTimers(currentTime) {\n      // Check for tasks that are no longer delayed and add them to the queue.\n      if (firstDelayedTask !== null && firstDelayedTask.startTime <= currentTime) {\n        do {\n          var task = firstDelayedTask;\n          var next = task.next;\n\n          if (task === next) {\n            firstDelayedTask = null;\n          } else {\n            firstDelayedTask = next;\n            var previous = task.previous;\n            previous.next = next;\n            next.previous = previous;\n          }\n\n          task.next = task.previous = null;\n          insertScheduledTask(task, task.expirationTime);\n        } while (firstDelayedTask !== null && firstDelayedTask.startTime <= currentTime);\n      }\n    }\n\n    function handleTimeout(currentTime) {\n      isHostTimeoutScheduled = false;\n      advanceTimers(currentTime);\n\n      if (!isHostCallbackScheduled) {\n        if (firstTask !== null) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        } else if (firstDelayedTask !== null) {\n          requestHostTimeout(handleTimeout, firstDelayedTask.startTime - currentTime);\n        }\n      }\n    }\n\n    function flushWork(hasTimeRemaining, initialTime) {\n      // Exit right away if we're currently paused\n      if (enableSchedulerDebugging && isSchedulerPaused) {\n        return;\n      } // We'll need a host callback the next time work is scheduled.\n\n\n      isHostCallbackScheduled = false;\n\n      if (isHostTimeoutScheduled) {\n        // We scheduled a timeout but it's no longer needed. Cancel it.\n        isHostTimeoutScheduled = false;\n        cancelHostTimeout();\n      }\n\n      var currentTime = initialTime;\n      advanceTimers(currentTime);\n      isPerformingWork = true;\n\n      try {\n        if (!hasTimeRemaining) {\n          // Flush all the expired callbacks without yielding.\n          // TODO: Split flushWork into two separate functions instead of using\n          // a boolean argument?\n          while (firstTask !== null && firstTask.expirationTime <= currentTime && !(enableSchedulerDebugging && isSchedulerPaused)) {\n            flushTask(firstTask, currentTime);\n            currentTime = exports.unstable_now();\n            advanceTimers(currentTime);\n          }\n        } else {\n          // Keep flushing callbacks until we run out of time in the frame.\n          if (firstTask !== null) {\n            do {\n              flushTask(firstTask, currentTime);\n              currentTime = exports.unstable_now();\n              advanceTimers(currentTime);\n            } while (firstTask !== null && !shouldYieldToHost() && !(enableSchedulerDebugging && isSchedulerPaused));\n          }\n        } // Return whether there's additional work\n\n\n        if (firstTask !== null) {\n          return true;\n        } else {\n          if (firstDelayedTask !== null) {\n            requestHostTimeout(handleTimeout, firstDelayedTask.startTime - currentTime);\n          }\n\n          return false;\n        }\n      } finally {\n        isPerformingWork = false;\n      }\n    }\n\n    function unstable_runWithPriority(priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n        case LowPriority:\n        case IdlePriority:\n          break;\n\n        default:\n          priorityLevel = NormalPriority;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_next(eventHandler) {\n      var priorityLevel;\n\n      switch (currentPriorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n          // Shift down to normal priority\n          priorityLevel = NormalPriority;\n          break;\n\n        default:\n          // Anything lower than normal priority should remain at the current level.\n          priorityLevel = currentPriorityLevel;\n          break;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_wrapCallback(callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        // This is a fork of runWithPriority, inlined for performance.\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = parentPriorityLevel;\n\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      };\n    }\n\n    function timeoutForPriorityLevel(priorityLevel) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n          return IMMEDIATE_PRIORITY_TIMEOUT;\n\n        case UserBlockingPriority:\n          return USER_BLOCKING_PRIORITY;\n\n        case IdlePriority:\n          return IDLE_PRIORITY;\n\n        case LowPriority:\n          return LOW_PRIORITY_TIMEOUT;\n\n        case NormalPriority:\n        default:\n          return NORMAL_PRIORITY_TIMEOUT;\n      }\n    }\n\n    function unstable_scheduleCallback(priorityLevel, callback, options) {\n      var currentTime = exports.unstable_now();\n      var startTime;\n      var timeout;\n\n      if (typeof options === 'object' && options !== null) {\n        var delay = options.delay;\n\n        if (typeof delay === 'number' && delay > 0) {\n          startTime = currentTime + delay;\n        } else {\n          startTime = currentTime;\n        }\n\n        timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n      } else {\n        timeout = timeoutForPriorityLevel(priorityLevel);\n        startTime = currentTime;\n      }\n\n      var expirationTime = startTime + timeout;\n      var newTask = {\n        callback: callback,\n        priorityLevel: priorityLevel,\n        startTime: startTime,\n        expirationTime: expirationTime,\n        next: null,\n        previous: null\n      };\n\n      if (startTime > currentTime) {\n        // This is a delayed task.\n        insertDelayedTask(newTask, startTime);\n\n        if (firstTask === null && firstDelayedTask === newTask) {\n          // All tasks are delayed, and this is the task with the earliest delay.\n          if (isHostTimeoutScheduled) {\n            // Cancel an existing timeout.\n            cancelHostTimeout();\n          } else {\n            isHostTimeoutScheduled = true;\n          } // Schedule a timeout.\n\n\n          requestHostTimeout(handleTimeout, startTime - currentTime);\n        }\n      } else {\n        insertScheduledTask(newTask, expirationTime); // Schedule a host callback, if needed. If we're already performing work,\n        // wait until the next time we yield.\n\n        if (!isHostCallbackScheduled && !isPerformingWork) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        }\n      }\n\n      return newTask;\n    }\n\n    function insertScheduledTask(newTask, expirationTime) {\n      // Insert the new task into the list, ordered first by its timeout, then by\n      // insertion. So the new task is inserted after any other task the\n      // same timeout\n      if (firstTask === null) {\n        // This is the first task in the list.\n        firstTask = newTask.next = newTask.previous = newTask;\n      } else {\n        var next = null;\n        var task = firstTask;\n\n        do {\n          if (expirationTime < task.expirationTime) {\n            // The new task times out before this one.\n            next = task;\n            break;\n          }\n\n          task = task.next;\n        } while (task !== firstTask);\n\n        if (next === null) {\n          // No task with a later timeout was found, which means the new task has\n          // the latest timeout in the list.\n          next = firstTask;\n        } else if (next === firstTask) {\n          // The new task has the earliest expiration in the entire list.\n          firstTask = newTask;\n        }\n\n        var previous = next.previous;\n        previous.next = next.previous = newTask;\n        newTask.next = next;\n        newTask.previous = previous;\n      }\n    }\n\n    function insertDelayedTask(newTask, startTime) {\n      // Insert the new task into the list, ordered by its start time.\n      if (firstDelayedTask === null) {\n        // This is the first task in the list.\n        firstDelayedTask = newTask.next = newTask.previous = newTask;\n      } else {\n        var next = null;\n        var task = firstDelayedTask;\n\n        do {\n          if (startTime < task.startTime) {\n            // The new task times out before this one.\n            next = task;\n            break;\n          }\n\n          task = task.next;\n        } while (task !== firstDelayedTask);\n\n        if (next === null) {\n          // No task with a later timeout was found, which means the new task has\n          // the latest timeout in the list.\n          next = firstDelayedTask;\n        } else if (next === firstDelayedTask) {\n          // The new task has the earliest expiration in the entire list.\n          firstDelayedTask = newTask;\n        }\n\n        var previous = next.previous;\n        previous.next = next.previous = newTask;\n        newTask.next = next;\n        newTask.previous = previous;\n      }\n    }\n\n    function unstable_pauseExecution() {\n      isSchedulerPaused = true;\n    }\n\n    function unstable_continueExecution() {\n      isSchedulerPaused = false;\n\n      if (!isHostCallbackScheduled && !isPerformingWork) {\n        isHostCallbackScheduled = true;\n        requestHostCallback(flushWork);\n      }\n    }\n\n    function unstable_getFirstCallbackNode() {\n      return firstTask;\n    }\n\n    function unstable_cancelCallback(task) {\n      var next = task.next;\n\n      if (next === null) {\n        // Already cancelled.\n        return;\n      }\n\n      if (task === next) {\n        if (task === firstTask) {\n          firstTask = null;\n        } else if (task === firstDelayedTask) {\n          firstDelayedTask = null;\n        }\n      } else {\n        if (task === firstTask) {\n          firstTask = next;\n        } else if (task === firstDelayedTask) {\n          firstDelayedTask = next;\n        }\n\n        var previous = task.previous;\n        previous.next = next;\n        next.previous = previous;\n      }\n\n      task.next = task.previous = null;\n    }\n\n    function unstable_getCurrentPriorityLevel() {\n      return currentPriorityLevel;\n    }\n\n    function unstable_shouldYield() {\n      var currentTime = exports.unstable_now();\n      advanceTimers(currentTime);\n      return currentTask !== null && firstTask !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n    }\n\n    var unstable_requestPaint = requestPaint;\n    exports.unstable_ImmediatePriority = ImmediatePriority;\n    exports.unstable_UserBlockingPriority = UserBlockingPriority;\n    exports.unstable_NormalPriority = NormalPriority;\n    exports.unstable_IdlePriority = IdlePriority;\n    exports.unstable_LowPriority = LowPriority;\n    exports.unstable_runWithPriority = unstable_runWithPriority;\n    exports.unstable_next = unstable_next;\n    exports.unstable_scheduleCallback = unstable_scheduleCallback;\n    exports.unstable_cancelCallback = unstable_cancelCallback;\n    exports.unstable_wrapCallback = unstable_wrapCallback;\n    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n    exports.unstable_shouldYield = unstable_shouldYield;\n    exports.unstable_requestPaint = unstable_requestPaint;\n    exports.unstable_continueExecution = unstable_continueExecution;\n    exports.unstable_pauseExecution = unstable_pauseExecution;\n    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n  })();\n}","map":{"version":3,"sources":["C:/SravsGithub/sravsrepo/projections/node_modules/scheduler/cjs/scheduler.development.js"],"names":["process","env","NODE_ENV","Object","defineProperty","exports","value","enableSchedulerDebugging","enableIsInputPending","requestIdleCallbackBeforeFirstFrame","requestTimerEventBeforeFirstFrame","enableMessageLoopImplementation","requestHostCallback","requestHostTimeout","cancelHostTimeout","shouldYieldToHost","requestPaint","unstable_now","unstable_forceFrameRate","window","MessageChannel","_callback","_timeoutID","_flushCallback","currentTime","hasRemainingTime","e","setTimeout","Date","now","cb","ms","clearTimeout","performance","_Date","_setTimeout","_clearTimeout","requestAnimationFrame","cancelAnimationFrame","requestIdleCallback","console","error","requestIdleCallbackBeforeFirstFrame$1","cancelIdleCallback","isRAFLoopRunning","isMessageLoopRunning","scheduledHostCallback","rAFTimeoutID","taskTimeoutID","frameLength","prevRAFTime","prevRAFInterval","frameDeadline","fpsLocked","maxFrameLength","needsPaint","navigator","undefined","scheduling","isInputPending","fps","Math","floor","performWorkUntilDeadline","hasTimeRemaining","hasMoreWork","port","postMessage","_currentTime","_hasTimeRemaining","_hasMoreWork","channel","port2","port1","onmessage","onAnimationFrame","rAFTime","nextRAFTime","onTimeout","rAFInterval","callback","idleCallbackID","idleTimeoutID","onIdleCallbackBeforeFirstFrame","onTimerEventBeforeFirstFrame","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY","firstTask","firstDelayedTask","isSchedulerPaused","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","scheduler_flushTaskAtPriority_Immediate","didTimeout","scheduler_flushTaskAtPriority_UserBlocking","scheduler_flushTaskAtPriority_Normal","scheduler_flushTaskAtPriority_Low","scheduler_flushTaskAtPriority_Idle","flushTask","task","next","previous","previousPriorityLevel","previousTask","priorityLevel","continuationCallback","didUserCallbackTimeout","expirationTime","continuationTask","nextAfterContinuation","t","_previous","advanceTimers","startTime","insertScheduledTask","handleTimeout","flushWork","initialTime","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","timeoutForPriorityLevel","unstable_scheduleCallback","options","timeout","delay","newTask","insertDelayedTask","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","unstable_shouldYield","unstable_requestPaint","unstable_ImmediatePriority","unstable_UserBlockingPriority","unstable_NormalPriority","unstable_IdlePriority","unstable_LowPriority"],"mappings":"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","sourcesContent":["/** @license React v0.15.0\r\n * scheduler.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n'use strict';\r\n\r\n\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  (function() {\r\n'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\nvar enableSchedulerDebugging = false;\r\nvar enableIsInputPending = false;\r\nvar requestIdleCallbackBeforeFirstFrame = false;\r\nvar requestTimerEventBeforeFirstFrame = false;\r\nvar enableMessageLoopImplementation = false;\r\n\r\n// The DOM Scheduler implementation is similar to requestIdleCallback. It\r\n// works by scheduling a requestAnimationFrame, storing the time for the start\r\n// of the frame, then scheduling a postMessage which gets scheduled after paint.\r\n// Within the postMessage handler do as much work as possible until time + frame\r\n// rate. By separating the idle call into a separate event tick we ensure that\r\n// layout, paint and other browser work is counted against the available time.\r\n// The frame rate is dynamically adjusted.\r\n\r\nvar requestHostCallback = void 0;\r\n\r\nvar requestHostTimeout = void 0;\r\nvar cancelHostTimeout = void 0;\r\nvar shouldYieldToHost = void 0;\r\nvar requestPaint = void 0;\r\nexports.unstable_now = void 0;\r\nexports.unstable_forceFrameRate = void 0;\r\n\r\nif (\r\n// If Scheduler runs in a non-DOM environment, it falls back to a naive\r\n// implementation using setTimeout.\r\ntypeof window === 'undefined' ||\r\n// Check if MessageChannel is supported, too.\r\ntypeof MessageChannel !== 'function') {\r\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\r\n  // fallback to a naive implementation.\r\n  var _callback = null;\r\n  var _timeoutID = null;\r\n  var _flushCallback = function () {\r\n    if (_callback !== null) {\r\n      try {\r\n        var currentTime = exports.unstable_now();\r\n        var hasRemainingTime = true;\r\n        _callback(hasRemainingTime, currentTime);\r\n        _callback = null;\r\n      } catch (e) {\r\n        setTimeout(_flushCallback, 0);\r\n        throw e;\r\n      }\r\n    }\r\n  };\r\n  exports.unstable_now = function () {\r\n    return Date.now();\r\n  };\r\n  requestHostCallback = function (cb) {\r\n    if (_callback !== null) {\r\n      // Protect against re-entrancy.\r\n      setTimeout(requestHostCallback, 0, cb);\r\n    } else {\r\n      _callback = cb;\r\n      setTimeout(_flushCallback, 0);\r\n    }\r\n  };\r\n  requestHostTimeout = function (cb, ms) {\r\n    _timeoutID = setTimeout(cb, ms);\r\n  };\r\n  cancelHostTimeout = function () {\r\n    clearTimeout(_timeoutID);\r\n  };\r\n  shouldYieldToHost = function () {\r\n    return false;\r\n  };\r\n  requestPaint = exports.unstable_forceFrameRate = function () {};\r\n} else {\r\n  // Capture local references to native APIs, in case a polyfill overrides them.\r\n  var performance = window.performance;\r\n  var _Date = window.Date;\r\n  var _setTimeout = window.setTimeout;\r\n  var _clearTimeout = window.clearTimeout;\r\n  var requestAnimationFrame = window.requestAnimationFrame;\r\n  var cancelAnimationFrame = window.cancelAnimationFrame;\r\n  var requestIdleCallback = window.requestIdleCallback;\r\n\r\n  if (typeof console !== 'undefined') {\r\n    // TODO: Remove fb.me link\r\n    if (typeof requestAnimationFrame !== 'function') {\r\n      console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\r\n    }\r\n    if (typeof cancelAnimationFrame !== 'function') {\r\n      console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\r\n    }\r\n  }\r\n\r\n  var requestIdleCallbackBeforeFirstFrame$1 = requestIdleCallbackBeforeFirstFrame && typeof requestIdleCallback === 'function' && typeof cancelIdleCallback === 'function';\r\n\r\n  exports.unstable_now = typeof performance === 'object' && typeof performance.now === 'function' ? function () {\r\n    return performance.now();\r\n  } : function () {\r\n    return _Date.now();\r\n  };\r\n\r\n  var isRAFLoopRunning = false;\r\n  var isMessageLoopRunning = false;\r\n  var scheduledHostCallback = null;\r\n  var rAFTimeoutID = -1;\r\n  var taskTimeoutID = -1;\r\n\r\n  var frameLength = enableMessageLoopImplementation ? // We won't attempt to align with the vsync. Instead we'll yield multiple\r\n  // times per frame, often enough to keep it responsive even at really\r\n  // high frame rates > 120.\r\n  5 : // Use a heuristic to measure the frame rate and yield at the end of the\r\n  // frame. We start out assuming that we run at 30fps but then the\r\n  // heuristic tracking will adjust this value to a faster fps if we get\r\n  // more frequent animation frames.\r\n  33.33;\r\n\r\n  var prevRAFTime = -1;\r\n  var prevRAFInterval = -1;\r\n  var frameDeadline = 0;\r\n\r\n  var fpsLocked = false;\r\n\r\n  // TODO: Make this configurable\r\n  // TODO: Adjust this based on priority?\r\n  var maxFrameLength = 300;\r\n  var needsPaint = false;\r\n\r\n  if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {\r\n    var scheduling = navigator.scheduling;\r\n    shouldYieldToHost = function () {\r\n      var currentTime = exports.unstable_now();\r\n      if (currentTime >= frameDeadline) {\r\n        // There's no time left in the frame. We may want to yield control of\r\n        // the main thread, so the browser can perform high priority tasks. The\r\n        // main ones are painting and user input. If there's a pending paint or\r\n        // a pending input, then we should yield. But if there's neither, then\r\n        // we can yield less often while remaining responsive. We'll eventually\r\n        // yield regardless, since there could be a pending paint that wasn't\r\n        // accompanied by a call to `requestPaint`, or other main thread tasks\r\n        // like network events.\r\n        if (needsPaint || scheduling.isInputPending()) {\r\n          // There is either a pending paint or a pending input.\r\n          return true;\r\n        }\r\n        // There's no pending input. Only yield if we've reached the max\r\n        // frame length.\r\n        return currentTime >= frameDeadline + maxFrameLength;\r\n      } else {\r\n        // There's still time left in the frame.\r\n        return false;\r\n      }\r\n    };\r\n\r\n    requestPaint = function () {\r\n      needsPaint = true;\r\n    };\r\n  } else {\r\n    // `isInputPending` is not available. Since we have no way of knowing if\r\n    // there's pending input, always yield at the end of the frame.\r\n    shouldYieldToHost = function () {\r\n      return exports.unstable_now() >= frameDeadline;\r\n    };\r\n\r\n    // Since we yield every frame regardless, `requestPaint` has no effect.\r\n    requestPaint = function () {};\r\n  }\r\n\r\n  exports.unstable_forceFrameRate = function (fps) {\r\n    if (fps < 0 || fps > 125) {\r\n      console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\r\n      return;\r\n    }\r\n    if (fps > 0) {\r\n      frameLength = Math.floor(1000 / fps);\r\n      fpsLocked = true;\r\n    } else {\r\n      // reset the framerate\r\n      frameLength = 33.33;\r\n      fpsLocked = false;\r\n    }\r\n  };\r\n\r\n  var performWorkUntilDeadline = function () {\r\n    if (enableMessageLoopImplementation) {\r\n      if (scheduledHostCallback !== null) {\r\n        var currentTime = exports.unstable_now();\r\n        // Yield after `frameLength` ms, regardless of where we are in the vsync\r\n        // cycle. This means there's always time remaining at the beginning of\r\n        // the message event.\r\n        frameDeadline = currentTime + frameLength;\r\n        var hasTimeRemaining = true;\r\n        try {\r\n          var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\r\n          if (!hasMoreWork) {\r\n            isMessageLoopRunning = false;\r\n            scheduledHostCallback = null;\r\n          } else {\r\n            // If there's more work, schedule the next message event at the end\r\n            // of the preceding one.\r\n            port.postMessage(null);\r\n          }\r\n        } catch (error) {\r\n          // If a scheduler task throws, exit the current browser task so the\r\n          // error can be observed.\r\n          port.postMessage(null);\r\n          throw error;\r\n        }\r\n      }\r\n      // Yielding to the browser will give it a chance to paint, so we can\r\n      // reset this.\r\n      needsPaint = false;\r\n    } else {\r\n      if (scheduledHostCallback !== null) {\r\n        var _currentTime = exports.unstable_now();\r\n        var _hasTimeRemaining = frameDeadline - _currentTime > 0;\r\n        try {\r\n          var _hasMoreWork = scheduledHostCallback(_hasTimeRemaining, _currentTime);\r\n          if (!_hasMoreWork) {\r\n            scheduledHostCallback = null;\r\n          }\r\n        } catch (error) {\r\n          // If a scheduler task throws, exit the current browser task so the\r\n          // error can be observed, and post a new task as soon as possible\r\n          // so we can continue where we left off.\r\n          port.postMessage(null);\r\n          throw error;\r\n        }\r\n      }\r\n      // Yielding to the browser will give it a chance to paint, so we can\r\n      // reset this.\r\n      needsPaint = false;\r\n    }\r\n  };\r\n\r\n  var channel = new MessageChannel();\r\n  var port = channel.port2;\r\n  channel.port1.onmessage = performWorkUntilDeadline;\r\n\r\n  var onAnimationFrame = function (rAFTime) {\r\n    if (scheduledHostCallback === null) {\r\n      // No scheduled work. Exit.\r\n      prevRAFTime = -1;\r\n      prevRAFInterval = -1;\r\n      isRAFLoopRunning = false;\r\n      return;\r\n    }\r\n\r\n    // Eagerly schedule the next animation callback at the beginning of the\r\n    // frame. If the scheduler queue is not empty at the end of the frame, it\r\n    // will continue flushing inside that callback. If the queue *is* empty,\r\n    // then it will exit immediately. Posting the callback at the start of the\r\n    // frame ensures it's fired within the earliest possible frame. If we\r\n    // waited until the end of the frame to post the callback, we risk the\r\n    // browser skipping a frame and not firing the callback until the frame\r\n    // after that.\r\n    isRAFLoopRunning = true;\r\n    requestAnimationFrame(function (nextRAFTime) {\r\n      _clearTimeout(rAFTimeoutID);\r\n      onAnimationFrame(nextRAFTime);\r\n    });\r\n\r\n    // requestAnimationFrame is throttled when the tab is backgrounded. We\r\n    // don't want to stop working entirely. So we'll fallback to a timeout loop.\r\n    // TODO: Need a better heuristic for backgrounded work.\r\n    var onTimeout = function () {\r\n      frameDeadline = exports.unstable_now() + frameLength / 2;\r\n      performWorkUntilDeadline();\r\n      rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\r\n    };\r\n    rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\r\n\r\n    if (prevRAFTime !== -1 &&\r\n    // Make sure this rAF time is different from the previous one. This check\r\n    // could fail if two rAFs fire in the same frame.\r\n    rAFTime - prevRAFTime > 0.1) {\r\n      var rAFInterval = rAFTime - prevRAFTime;\r\n      if (!fpsLocked && prevRAFInterval !== -1) {\r\n        // We've observed two consecutive frame intervals. We'll use this to\r\n        // dynamically adjust the frame rate.\r\n        //\r\n        // If one frame goes long, then the next one can be short to catch up.\r\n        // If two frames are short in a row, then that's an indication that we\r\n        // actually have a higher frame rate than what we're currently\r\n        // optimizing. For example, if we're running on 120hz display or 90hz VR\r\n        // display. Take the max of the two in case one of them was an anomaly\r\n        // due to missed frame deadlines.\r\n        if (rAFInterval < frameLength && prevRAFInterval < frameLength) {\r\n          frameLength = rAFInterval < prevRAFInterval ? prevRAFInterval : rAFInterval;\r\n          if (frameLength < 8.33) {\r\n            // Defensive coding. We don't support higher frame rates than 120hz.\r\n            // If the calculated frame length gets lower than 8, it is probably\r\n            // a bug.\r\n            frameLength = 8.33;\r\n          }\r\n        }\r\n      }\r\n      prevRAFInterval = rAFInterval;\r\n    }\r\n    prevRAFTime = rAFTime;\r\n    frameDeadline = rAFTime + frameLength;\r\n\r\n    // We use the postMessage trick to defer idle work until after the repaint.\r\n    port.postMessage(null);\r\n  };\r\n\r\n  requestHostCallback = function (callback) {\r\n    scheduledHostCallback = callback;\r\n    if (enableMessageLoopImplementation) {\r\n      if (!isMessageLoopRunning) {\r\n        isMessageLoopRunning = true;\r\n        port.postMessage(null);\r\n      }\r\n    } else {\r\n      if (!isRAFLoopRunning) {\r\n        // Start a rAF loop.\r\n        isRAFLoopRunning = true;\r\n        requestAnimationFrame(function (rAFTime) {\r\n          if (requestIdleCallbackBeforeFirstFrame$1) {\r\n            cancelIdleCallback(idleCallbackID);\r\n          }\r\n          if (requestTimerEventBeforeFirstFrame) {\r\n            _clearTimeout(idleTimeoutID);\r\n          }\r\n          onAnimationFrame(rAFTime);\r\n        });\r\n\r\n        // If we just missed the last vsync, the next rAF might not happen for\r\n        // another frame. To claim as much idle time as possible, post a\r\n        // callback with `requestIdleCallback`, which should fire if there's\r\n        // idle time left in the frame.\r\n        //\r\n        // This should only be an issue for the first rAF in the loop;\r\n        // subsequent rAFs are scheduled at the beginning of the\r\n        // preceding frame.\r\n        var idleCallbackID = void 0;\r\n        if (requestIdleCallbackBeforeFirstFrame$1) {\r\n          idleCallbackID = requestIdleCallback(function onIdleCallbackBeforeFirstFrame() {\r\n            if (requestTimerEventBeforeFirstFrame) {\r\n              _clearTimeout(idleTimeoutID);\r\n            }\r\n            frameDeadline = exports.unstable_now() + frameLength;\r\n            performWorkUntilDeadline();\r\n          });\r\n        }\r\n        // Alternate strategy to address the same problem. Scheduler a timer\r\n        // with no delay. If this fires before the rAF, that likely indicates\r\n        // that there's idle time before the next vsync. This isn't always the\r\n        // case, but we'll be aggressive and assume it is, as a trade off to\r\n        // prevent idle periods.\r\n        var idleTimeoutID = void 0;\r\n        if (requestTimerEventBeforeFirstFrame) {\r\n          idleTimeoutID = _setTimeout(function onTimerEventBeforeFirstFrame() {\r\n            if (requestIdleCallbackBeforeFirstFrame$1) {\r\n              cancelIdleCallback(idleCallbackID);\r\n            }\r\n            frameDeadline = exports.unstable_now() + frameLength;\r\n            performWorkUntilDeadline();\r\n          }, 0);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  requestHostTimeout = function (callback, ms) {\r\n    taskTimeoutID = _setTimeout(function () {\r\n      callback(exports.unstable_now());\r\n    }, ms);\r\n  };\r\n\r\n  cancelHostTimeout = function () {\r\n    _clearTimeout(taskTimeoutID);\r\n    taskTimeoutID = -1;\r\n  };\r\n}\r\n\r\n/* eslint-disable no-var */\r\n\r\n// TODO: Use symbols?\r\nvar ImmediatePriority = 1;\r\nvar UserBlockingPriority = 2;\r\nvar NormalPriority = 3;\r\nvar LowPriority = 4;\r\nvar IdlePriority = 5;\r\n\r\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\r\n// Math.pow(2, 30) - 1\r\n// 0b111111111111111111111111111111\r\nvar maxSigned31BitInt = 1073741823;\r\n\r\n// Times out immediately\r\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1;\r\n// Eventually times out\r\nvar USER_BLOCKING_PRIORITY = 250;\r\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\r\nvar LOW_PRIORITY_TIMEOUT = 10000;\r\n// Never times out\r\nvar IDLE_PRIORITY = maxSigned31BitInt;\r\n\r\n// Tasks are stored as a circular, doubly linked list.\r\nvar firstTask = null;\r\nvar firstDelayedTask = null;\r\n\r\n// Pausing the scheduler is useful for debugging.\r\nvar isSchedulerPaused = false;\r\n\r\nvar currentTask = null;\r\nvar currentPriorityLevel = NormalPriority;\r\n\r\n// This is set while performing work, to prevent re-entrancy.\r\nvar isPerformingWork = false;\r\n\r\nvar isHostCallbackScheduled = false;\r\nvar isHostTimeoutScheduled = false;\r\n\r\nfunction scheduler_flushTaskAtPriority_Immediate(callback, didTimeout) {\r\n  return callback(didTimeout);\r\n}\r\nfunction scheduler_flushTaskAtPriority_UserBlocking(callback, didTimeout) {\r\n  return callback(didTimeout);\r\n}\r\nfunction scheduler_flushTaskAtPriority_Normal(callback, didTimeout) {\r\n  return callback(didTimeout);\r\n}\r\nfunction scheduler_flushTaskAtPriority_Low(callback, didTimeout) {\r\n  return callback(didTimeout);\r\n}\r\nfunction scheduler_flushTaskAtPriority_Idle(callback, didTimeout) {\r\n  return callback(didTimeout);\r\n}\r\n\r\nfunction flushTask(task, currentTime) {\r\n  // Remove the task from the list before calling the callback. That way the\r\n  // list is in a consistent state even if the callback throws.\r\n  var next = task.next;\r\n  if (next === task) {\r\n    // This is the only scheduled task. Clear the list.\r\n    firstTask = null;\r\n  } else {\r\n    // Remove the task from its position in the list.\r\n    if (task === firstTask) {\r\n      firstTask = next;\r\n    }\r\n    var previous = task.previous;\r\n    previous.next = next;\r\n    next.previous = previous;\r\n  }\r\n  task.next = task.previous = null;\r\n\r\n  // Now it's safe to execute the task.\r\n  var callback = task.callback;\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  var previousTask = currentTask;\r\n  currentPriorityLevel = task.priorityLevel;\r\n  currentTask = task;\r\n  var continuationCallback;\r\n  try {\r\n    var didUserCallbackTimeout = task.expirationTime <= currentTime;\r\n    // Add an extra function to the callstack. Profiling tools can use this\r\n    // to infer the priority of work that appears higher in the stack.\r\n    switch (currentPriorityLevel) {\r\n      case ImmediatePriority:\r\n        continuationCallback = scheduler_flushTaskAtPriority_Immediate(callback, didUserCallbackTimeout);\r\n        break;\r\n      case UserBlockingPriority:\r\n        continuationCallback = scheduler_flushTaskAtPriority_UserBlocking(callback, didUserCallbackTimeout);\r\n        break;\r\n      case NormalPriority:\r\n        continuationCallback = scheduler_flushTaskAtPriority_Normal(callback, didUserCallbackTimeout);\r\n        break;\r\n      case LowPriority:\r\n        continuationCallback = scheduler_flushTaskAtPriority_Low(callback, didUserCallbackTimeout);\r\n        break;\r\n      case IdlePriority:\r\n        continuationCallback = scheduler_flushTaskAtPriority_Idle(callback, didUserCallbackTimeout);\r\n        break;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n    currentTask = previousTask;\r\n  }\r\n\r\n  // A callback may return a continuation. The continuation should be scheduled\r\n  // with the same priority and expiration as the just-finished callback.\r\n  if (typeof continuationCallback === 'function') {\r\n    var expirationTime = task.expirationTime;\r\n    var continuationTask = task;\r\n    continuationTask.callback = continuationCallback;\r\n\r\n    // Insert the new callback into the list, sorted by its timeout. This is\r\n    // almost the same as the code in `scheduleCallback`, except the callback\r\n    // is inserted into the list *before* callbacks of equal timeout instead\r\n    // of after.\r\n    if (firstTask === null) {\r\n      // This is the first callback in the list.\r\n      firstTask = continuationTask.next = continuationTask.previous = continuationTask;\r\n    } else {\r\n      var nextAfterContinuation = null;\r\n      var t = firstTask;\r\n      do {\r\n        if (expirationTime <= t.expirationTime) {\r\n          // This task times out at or after the continuation. We will insert\r\n          // the continuation *before* this task.\r\n          nextAfterContinuation = t;\r\n          break;\r\n        }\r\n        t = t.next;\r\n      } while (t !== firstTask);\r\n      if (nextAfterContinuation === null) {\r\n        // No equal or lower priority task was found, which means the new task\r\n        // is the lowest priority task in the list.\r\n        nextAfterContinuation = firstTask;\r\n      } else if (nextAfterContinuation === firstTask) {\r\n        // The new task is the highest priority task in the list.\r\n        firstTask = continuationTask;\r\n      }\r\n\r\n      var _previous = nextAfterContinuation.previous;\r\n      _previous.next = nextAfterContinuation.previous = continuationTask;\r\n      continuationTask.next = nextAfterContinuation;\r\n      continuationTask.previous = _previous;\r\n    }\r\n  }\r\n}\r\n\r\nfunction advanceTimers(currentTime) {\r\n  // Check for tasks that are no longer delayed and add them to the queue.\r\n  if (firstDelayedTask !== null && firstDelayedTask.startTime <= currentTime) {\r\n    do {\r\n      var task = firstDelayedTask;\r\n      var next = task.next;\r\n      if (task === next) {\r\n        firstDelayedTask = null;\r\n      } else {\r\n        firstDelayedTask = next;\r\n        var previous = task.previous;\r\n        previous.next = next;\r\n        next.previous = previous;\r\n      }\r\n      task.next = task.previous = null;\r\n      insertScheduledTask(task, task.expirationTime);\r\n    } while (firstDelayedTask !== null && firstDelayedTask.startTime <= currentTime);\r\n  }\r\n}\r\n\r\nfunction handleTimeout(currentTime) {\r\n  isHostTimeoutScheduled = false;\r\n  advanceTimers(currentTime);\r\n\r\n  if (!isHostCallbackScheduled) {\r\n    if (firstTask !== null) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    } else if (firstDelayedTask !== null) {\r\n      requestHostTimeout(handleTimeout, firstDelayedTask.startTime - currentTime);\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushWork(hasTimeRemaining, initialTime) {\r\n  // Exit right away if we're currently paused\r\n  if (enableSchedulerDebugging && isSchedulerPaused) {\r\n    return;\r\n  }\r\n\r\n  // We'll need a host callback the next time work is scheduled.\r\n  isHostCallbackScheduled = false;\r\n  if (isHostTimeoutScheduled) {\r\n    // We scheduled a timeout but it's no longer needed. Cancel it.\r\n    isHostTimeoutScheduled = false;\r\n    cancelHostTimeout();\r\n  }\r\n\r\n  var currentTime = initialTime;\r\n  advanceTimers(currentTime);\r\n\r\n  isPerformingWork = true;\r\n  try {\r\n    if (!hasTimeRemaining) {\r\n      // Flush all the expired callbacks without yielding.\r\n      // TODO: Split flushWork into two separate functions instead of using\r\n      // a boolean argument?\r\n      while (firstTask !== null && firstTask.expirationTime <= currentTime && !(enableSchedulerDebugging && isSchedulerPaused)) {\r\n        flushTask(firstTask, currentTime);\r\n        currentTime = exports.unstable_now();\r\n        advanceTimers(currentTime);\r\n      }\r\n    } else {\r\n      // Keep flushing callbacks until we run out of time in the frame.\r\n      if (firstTask !== null) {\r\n        do {\r\n          flushTask(firstTask, currentTime);\r\n          currentTime = exports.unstable_now();\r\n          advanceTimers(currentTime);\r\n        } while (firstTask !== null && !shouldYieldToHost() && !(enableSchedulerDebugging && isSchedulerPaused));\r\n      }\r\n    }\r\n    // Return whether there's additional work\r\n    if (firstTask !== null) {\r\n      return true;\r\n    } else {\r\n      if (firstDelayedTask !== null) {\r\n        requestHostTimeout(handleTimeout, firstDelayedTask.startTime - currentTime);\r\n      }\r\n      return false;\r\n    }\r\n  } finally {\r\n    isPerformingWork = false;\r\n  }\r\n}\r\n\r\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n    case LowPriority:\r\n    case IdlePriority:\r\n      break;\r\n    default:\r\n      priorityLevel = NormalPriority;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction unstable_next(eventHandler) {\r\n  var priorityLevel;\r\n  switch (currentPriorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n      // Shift down to normal priority\r\n      priorityLevel = NormalPriority;\r\n      break;\r\n    default:\r\n      // Anything lower than normal priority should remain at the current level.\r\n      priorityLevel = currentPriorityLevel;\r\n      break;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  currentPriorityLevel = priorityLevel;\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n  }\r\n}\r\n\r\nfunction unstable_wrapCallback(callback) {\r\n  var parentPriorityLevel = currentPriorityLevel;\r\n  return function () {\r\n    // This is a fork of runWithPriority, inlined for performance.\r\n    var previousPriorityLevel = currentPriorityLevel;\r\n    currentPriorityLevel = parentPriorityLevel;\r\n\r\n    try {\r\n      return callback.apply(this, arguments);\r\n    } finally {\r\n      currentPriorityLevel = previousPriorityLevel;\r\n    }\r\n  };\r\n}\r\n\r\nfunction timeoutForPriorityLevel(priorityLevel) {\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n      return IMMEDIATE_PRIORITY_TIMEOUT;\r\n    case UserBlockingPriority:\r\n      return USER_BLOCKING_PRIORITY;\r\n    case IdlePriority:\r\n      return IDLE_PRIORITY;\r\n    case LowPriority:\r\n      return LOW_PRIORITY_TIMEOUT;\r\n    case NormalPriority:\r\n    default:\r\n      return NORMAL_PRIORITY_TIMEOUT;\r\n  }\r\n}\r\n\r\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\r\n  var currentTime = exports.unstable_now();\r\n\r\n  var startTime;\r\n  var timeout;\r\n  if (typeof options === 'object' && options !== null) {\r\n    var delay = options.delay;\r\n    if (typeof delay === 'number' && delay > 0) {\r\n      startTime = currentTime + delay;\r\n    } else {\r\n      startTime = currentTime;\r\n    }\r\n    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\r\n  } else {\r\n    timeout = timeoutForPriorityLevel(priorityLevel);\r\n    startTime = currentTime;\r\n  }\r\n\r\n  var expirationTime = startTime + timeout;\r\n\r\n  var newTask = {\r\n    callback: callback,\r\n    priorityLevel: priorityLevel,\r\n    startTime: startTime,\r\n    expirationTime: expirationTime,\r\n    next: null,\r\n    previous: null\r\n  };\r\n\r\n  if (startTime > currentTime) {\r\n    // This is a delayed task.\r\n    insertDelayedTask(newTask, startTime);\r\n    if (firstTask === null && firstDelayedTask === newTask) {\r\n      // All tasks are delayed, and this is the task with the earliest delay.\r\n      if (isHostTimeoutScheduled) {\r\n        // Cancel an existing timeout.\r\n        cancelHostTimeout();\r\n      } else {\r\n        isHostTimeoutScheduled = true;\r\n      }\r\n      // Schedule a timeout.\r\n      requestHostTimeout(handleTimeout, startTime - currentTime);\r\n    }\r\n  } else {\r\n    insertScheduledTask(newTask, expirationTime);\r\n    // Schedule a host callback, if needed. If we're already performing work,\r\n    // wait until the next time we yield.\r\n    if (!isHostCallbackScheduled && !isPerformingWork) {\r\n      isHostCallbackScheduled = true;\r\n      requestHostCallback(flushWork);\r\n    }\r\n  }\r\n\r\n  return newTask;\r\n}\r\n\r\nfunction insertScheduledTask(newTask, expirationTime) {\r\n  // Insert the new task into the list, ordered first by its timeout, then by\r\n  // insertion. So the new task is inserted after any other task the\r\n  // same timeout\r\n  if (firstTask === null) {\r\n    // This is the first task in the list.\r\n    firstTask = newTask.next = newTask.previous = newTask;\r\n  } else {\r\n    var next = null;\r\n    var task = firstTask;\r\n    do {\r\n      if (expirationTime < task.expirationTime) {\r\n        // The new task times out before this one.\r\n        next = task;\r\n        break;\r\n      }\r\n      task = task.next;\r\n    } while (task !== firstTask);\r\n\r\n    if (next === null) {\r\n      // No task with a later timeout was found, which means the new task has\r\n      // the latest timeout in the list.\r\n      next = firstTask;\r\n    } else if (next === firstTask) {\r\n      // The new task has the earliest expiration in the entire list.\r\n      firstTask = newTask;\r\n    }\r\n\r\n    var previous = next.previous;\r\n    previous.next = next.previous = newTask;\r\n    newTask.next = next;\r\n    newTask.previous = previous;\r\n  }\r\n}\r\n\r\nfunction insertDelayedTask(newTask, startTime) {\r\n  // Insert the new task into the list, ordered by its start time.\r\n  if (firstDelayedTask === null) {\r\n    // This is the first task in the list.\r\n    firstDelayedTask = newTask.next = newTask.previous = newTask;\r\n  } else {\r\n    var next = null;\r\n    var task = firstDelayedTask;\r\n    do {\r\n      if (startTime < task.startTime) {\r\n        // The new task times out before this one.\r\n        next = task;\r\n        break;\r\n      }\r\n      task = task.next;\r\n    } while (task !== firstDelayedTask);\r\n\r\n    if (next === null) {\r\n      // No task with a later timeout was found, which means the new task has\r\n      // the latest timeout in the list.\r\n      next = firstDelayedTask;\r\n    } else if (next === firstDelayedTask) {\r\n      // The new task has the earliest expiration in the entire list.\r\n      firstDelayedTask = newTask;\r\n    }\r\n\r\n    var previous = next.previous;\r\n    previous.next = next.previous = newTask;\r\n    newTask.next = next;\r\n    newTask.previous = previous;\r\n  }\r\n}\r\n\r\nfunction unstable_pauseExecution() {\r\n  isSchedulerPaused = true;\r\n}\r\n\r\nfunction unstable_continueExecution() {\r\n  isSchedulerPaused = false;\r\n  if (!isHostCallbackScheduled && !isPerformingWork) {\r\n    isHostCallbackScheduled = true;\r\n    requestHostCallback(flushWork);\r\n  }\r\n}\r\n\r\nfunction unstable_getFirstCallbackNode() {\r\n  return firstTask;\r\n}\r\n\r\nfunction unstable_cancelCallback(task) {\r\n  var next = task.next;\r\n  if (next === null) {\r\n    // Already cancelled.\r\n    return;\r\n  }\r\n\r\n  if (task === next) {\r\n    if (task === firstTask) {\r\n      firstTask = null;\r\n    } else if (task === firstDelayedTask) {\r\n      firstDelayedTask = null;\r\n    }\r\n  } else {\r\n    if (task === firstTask) {\r\n      firstTask = next;\r\n    } else if (task === firstDelayedTask) {\r\n      firstDelayedTask = next;\r\n    }\r\n    var previous = task.previous;\r\n    previous.next = next;\r\n    next.previous = previous;\r\n  }\r\n\r\n  task.next = task.previous = null;\r\n}\r\n\r\nfunction unstable_getCurrentPriorityLevel() {\r\n  return currentPriorityLevel;\r\n}\r\n\r\nfunction unstable_shouldYield() {\r\n  var currentTime = exports.unstable_now();\r\n  advanceTimers(currentTime);\r\n  return currentTask !== null && firstTask !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\r\n}\r\n\r\nvar unstable_requestPaint = requestPaint;\r\n\r\nexports.unstable_ImmediatePriority = ImmediatePriority;\r\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\r\nexports.unstable_NormalPriority = NormalPriority;\r\nexports.unstable_IdlePriority = IdlePriority;\r\nexports.unstable_LowPriority = LowPriority;\r\nexports.unstable_runWithPriority = unstable_runWithPriority;\r\nexports.unstable_next = unstable_next;\r\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\r\nexports.unstable_cancelCallback = unstable_cancelCallback;\r\nexports.unstable_wrapCallback = unstable_wrapCallback;\r\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\r\nexports.unstable_shouldYield = unstable_shouldYield;\r\nexports.unstable_requestPaint = unstable_requestPaint;\r\nexports.unstable_continueExecution = unstable_continueExecution;\r\nexports.unstable_pauseExecution = unstable_pauseExecution;\r\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\r\n  })();\r\n}\r\n"]},"metadata":{},"sourceType":"script"}