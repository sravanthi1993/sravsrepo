import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime/helpers/esm/createClass';
import _possibleConstructorReturn from '@babel/runtime/helpers/esm/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime/helpers/esm/getPrototypeOf';
import _inherits from '@babel/runtime/helpers/esm/inherits';
import _objectSpread from '@babel/runtime/helpers/esm/objectSpread';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import React from 'react';

/**
 * clone elements child
 * @param {Object} props
 * @returns {ReactElement} child with props
 */

var cloneChildrenWithProps = function cloneChildrenWithProps(children, props) {
  var condition = props.condition,
      withinIf = props.withinIf,
      newProps = _objectWithoutProperties(props, ["condition", "withinIf"]);

  return React.createElement(React.Fragment, null, React.Children.map(children, function (child) {
    if (typeof child === 'string' || !child.type) {
      return child;
    }

    if (child.type === ElIf || child.type === Else) {
      return React.cloneElement(child, _objectSpread({
        withinIf: withinIf
      }, props), child.props.children);
    }

    return React.cloneElement(child, newProps, child.props.children);
  }));
};

var If =
/*#__PURE__*/
function (_React$Component) {
  _inherits(If, _React$Component);

  function If() {
    _classCallCheck(this, If);

    return _possibleConstructorReturn(this, _getPrototypeOf(If).apply(this, arguments));
  }

  _createClass(If, [{
    key: "render",
    value: function render() {
      var children = React.Children.toArray(this.props.children);
      var conditionalRendering;

      if (this.props.condition) {
        // render without <ElIf> and <Else>
        conditionalRendering = children.filter(function (child) {
          return child.type !== ElIf && child.type !== Else;
        });
      } else {
        // find <ElIf> with `condition==true`;
        var validElif = children.find(function (child) {
          return child.type === ElIf && child.props.condition;
        }); // if not exist valid <ElIf>, find <Else>

        conditionalRendering = validElif || children.find(function (child) {
          return child.type === Else;
        });
      }

      return conditionalRendering ? cloneChildrenWithProps(conditionalRendering, _objectSpread({
        withinIf: true
      }, this.props)) : null;
    }
  }]);

  return If;
}(React.Component);
var ElIf =
/*#__PURE__*/
function (_React$Component2) {
  _inherits(ElIf, _React$Component2);

  function ElIf() {
    _classCallCheck(this, ElIf);

    return _possibleConstructorReturn(this, _getPrototypeOf(ElIf).apply(this, arguments));
  }

  _createClass(ElIf, [{
    key: "render",
    value: function render() {
      if (!this.props.withinIf) {
        // <ElIf> should be a nested child of <If> component
        return null;
      }

      return cloneChildrenWithProps(this.props.children, this.props);
    }
  }]);

  return ElIf;
}(React.Component);
var Else =
/*#__PURE__*/
function (_React$Component3) {
  _inherits(Else, _React$Component3);

  function Else() {
    _classCallCheck(this, Else);

    return _possibleConstructorReturn(this, _getPrototypeOf(Else).apply(this, arguments));
  }

  _createClass(Else, [{
    key: "render",
    value: function render() {
      if (!this.props.withinIf) {
        // <Else> should be a nested child of <If> component
        return null;
      }

      return cloneChildrenWithProps(this.props.children, this.props);
    }
  }]);

  return Else;
}(React.Component);

export { If, ElIf, Else };
