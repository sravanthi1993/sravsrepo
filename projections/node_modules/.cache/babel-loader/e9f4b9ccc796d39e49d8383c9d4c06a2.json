{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\samanchi\\\\Desktop\\\\React\\\\sravsrepo\\\\projections\\\\src\\\\Components\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './Search.css';\nimport { If, Else, Elif } from 'rc-if-else';\nimport { Label, Link, PrimaryButton, List } from 'office-ui-fabric-react';\nimport { SearchBox, ISearchBoxStyles } from 'office-ui-fabric-react/lib/SearchBox';\nimport { DetailsList, DetailsListLayoutMode, SelectionMode, Selection, IColumn } from 'office-ui-fabric-react/lib/DetailsList';\nimport Projects from \"./Projects\";\n\nfunction Search() {\n  _s();\n\n  const searchBoxStyles = {\n    root: {\n      width: 200\n    }\n  };\n  const [projlist, setprojlist] = useState([]);\n  const [state, setState] = useState({\n    searchString: \"\",\n    projListVisible: false\n  });\n\n  function onSubmit(searchString) {\n    //e.preventDefault();\n    const url = \"https://projectionsazurefunctions.azurewebsites.net/api/Search?code=CbTDUtF5NSctIKh/jP6BmrifZ17wiSyQvqc0COv0G1ybdouglcICWw==&ProjectName=\" + searchString; //const url = \"http://localhost:7071/api/Search?ProjectName=\"+searchString;\n\n    fetch(url, {\n      method: \"GET\"\n    }).then(response => response.json()).then(projects => {\n      if (projects.length != 0) {\n        setProjlist(projects);\n        setState(prevState => {\n          return { ...prevState,\n            projListVisible: true,\n            projNotFound: false\n          };\n        });\n      } else {\n        setState(prevstate => {\n          return { ...prevstate,\n            projNotFound: true,\n            projListVisible: false,\n            projDetailsVisible: false,\n            shouldShowProjections: false\n          };\n        });\n      }\n    }).catch(err => {\n      alert(err);\n    });\n  }\n\n  function computeWorkingDaysBetweenTwoDays(startDate, endDate) {\n    // Validate input\n    if (endDate < startDate) {\n      return 0;\n    } // Calculate days between dates\n\n\n    var millisecondsPerDay = 86400 * 1000; // Day in milliseconds\n\n    startDate.setHours(0, 0, 0, 1); // Start just after midnight\n\n    endDate.setHours(23, 59, 59, 999); // End just before midnight\n\n    var diff = endDate - startDate; // Milliseconds between datetime objects    \n\n    var days = Math.ceil(diff / millisecondsPerDay); // Subtract two weekend days for every week in between\n\n    var weeks = Math.floor(days / 7);\n    days -= weeks * 2; // Handle special cases\n\n    var startDay = startDate.getDay();\n    var endDay = endDate.getDay(); // Remove weekend not previously removed.   \n\n    if (startDay - endDay > 1) {\n      days -= 2;\n    } // Remove start day if span starts on Sunday but ends before Saturday\n\n\n    if (startDay == 0 && endDay != 6) {\n      days--;\n    } // Remove end day if span ends on Saturday but starts after Sunday\n\n\n    if (endDay == 6 && startDay != 0) {\n      days--;\n    }\n    /* Here is the code */\n\n\n    listofholidays.forEach(day => {\n      //console.log(day + \" -- \" + startDate + \" -- \" + endDate)\n      if (day >= startDate && day <= endDate) {\n        days--;\n      }\n    });\n    return days;\n  }\n\n  function showProjections() {\n    //const url = \"http://localhost:7071/api/search\";\n    const url = \"https://projectionsazurefunctions.azurewebsites.net/api/GetHolidays?code=IGZG4SdEVqbHWYhV32asIb8junLY3IttJDVB4KjCjL3aNGyr0L1rOg==\";\n    fetch(url, {\n      method: \"GET\"\n    }).then(response => response.json()).then(holidays => {\n      console.log(holidays);\n      holidays.map(holiday => {\n        listofholidays.push(new Date(Date.parse(holiday.holidayDate)));\n      });\n      console.log(listofholidays);\n      var total = 0;\n      var billDetails = [];\n      var billMap = new Map();\n      state.resources.map(res => {\n        var billing = res.billing; // var a = new Date(res.resourceProjStartDate);\n        //var b = state.endDate;\n\n        var start = new Date(res.resourceProjStartDate);\n        var end = new Date(start.getFullYear(), start.getMonth() + 1, 0);\n        console.log(start + \" - \" + end + \" - \" + billing);\n        end = end > state.endDate ? state.endDate : end;\n        var year = start.getFullYear();\n\n        while (end >= start) {\n          var diffDays = computeWorkingDaysBetweenTwoDays(start, end);\n          total += billing * diffDays;\n          var key = monthNames[start.getMonth()] + \" \" + start.getFullYear();\n          console.log(key + \"-\" + billMap.get(key));\n\n          if (!billMap.has(key)) {\n            billMap.set(key, 0);\n          }\n\n          billMap.set(key, billMap.get(key) + billing * diffDays);\n          var month = start.getMonth() == 11 ? -1 : start.getMonth();\n          year = start.getMonth() == 11 ? year + 1 : year;\n          start = new Date(year, month + 1, 1);\n          end = new Date(year, start.getMonth() + 1, 0);\n          end = end >= state.endDate ? state.endDate : end;\n          console.log(start + \" - \" + end + \" - \" + billing);\n        }\n      });\n      setState(prevstate => {\n        return { ...prevstate,\n          totalBill: total,\n          shouldShowProjections: true\n        };\n      });\n\n      for (const [key, value] of billMap) {\n        billDetails.push({\n          \"Month\": key,\n          \"Monthly Bill\": \"$\" + value\n        });\n        console.log(`${key}: ${value}`);\n      } //   billMap.map(monthlyBill => {\n      //       billDetails.push(\n      //           {\n      //               \"Month\": monthlyBill,\n      //               \"Monthly Bill\": \"$\" + (billing * diffDays)\n      //           },\n      //       )\n      //   })\n\n\n      setBillingDetails(billDetails);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SearchSection\",\n    children: [/*#__PURE__*/_jsxDEV(Label, {\n      children: \"Search for the Project ID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      styles: searchBoxStyles,\n      placeholder: \"Enter the Project name\",\n      onSearch: onSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(If, {\n      condition: state.projNotFound,\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Project not found! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(If, {\n      condition: state.projListVisible,\n      children: /*#__PURE__*/_jsxDEV(Projects, {\n        projectlist: projlist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Search, \"0bqjWBp32lA4ZgSlaYEaJRjfdn0=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/samanchi/Desktop/React/sravsrepo/projections/src/Components/Search.js"],"names":["React","useState","If","Else","Elif","Label","Link","PrimaryButton","List","SearchBox","ISearchBoxStyles","DetailsList","DetailsListLayoutMode","SelectionMode","Selection","IColumn","Projects","Search","searchBoxStyles","root","width","projlist","setprojlist","state","setState","searchString","projListVisible","onSubmit","url","fetch","method","then","response","json","projects","length","setProjlist","prevState","projNotFound","prevstate","projDetailsVisible","shouldShowProjections","catch","err","alert","computeWorkingDaysBetweenTwoDays","startDate","endDate","millisecondsPerDay","setHours","diff","days","Math","ceil","weeks","floor","startDay","getDay","endDay","listofholidays","forEach","day","showProjections","holidays","console","log","map","holiday","push","Date","parse","holidayDate","total","billDetails","billMap","Map","resources","res","billing","start","resourceProjStartDate","end","getFullYear","getMonth","year","diffDays","key","monthNames","get","has","set","month","totalBill","value","setBillingDetails"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport './Search.css';\r\nimport { If, Else, Elif } from 'rc-if-else';\r\nimport { Label, Link, PrimaryButton, List } from 'office-ui-fabric-react';\r\nimport { SearchBox, ISearchBoxStyles } from 'office-ui-fabric-react/lib/SearchBox';\r\nimport { DetailsList, DetailsListLayoutMode, SelectionMode, Selection, IColumn } from 'office-ui-fabric-react/lib/DetailsList';\r\nimport Projects from \"./Projects\";\r\n\r\nfunction Search(){\r\n\r\n    const searchBoxStyles = { root: { width: 200 } };\r\n    const [projlist, setprojlist] = useState([])\r\n    const [state, setState] = useState({\r\n        searchString: \"\",\r\n        projListVisible: false\r\n      });\r\n\r\n    function onSubmit(searchString) {\r\n        //e.preventDefault();\r\n        const url = \"https://projectionsazurefunctions.azurewebsites.net/api/Search?code=CbTDUtF5NSctIKh/jP6BmrifZ17wiSyQvqc0COv0G1ybdouglcICWw==&ProjectName=\"+searchString;\r\n        //const url = \"http://localhost:7071/api/Search?ProjectName=\"+searchString;\r\n        \r\n\r\n        fetch(url, {\r\n              method : \"GET\",\r\n            }).then(response => response.json()\r\n            ).then(projects => {\r\n                if(projects.length != 0)\r\n                {\r\n                    setProjlist(projects)\r\n                setState(prevState =>\r\n                    {return {...prevState, \r\n                        projListVisible: true,  \r\n                      projNotFound: false,\r\n                    }})\r\n                }\r\n                else{\r\n                    setState(prevstate =>\r\n                        {return{...prevstate,\r\n                            projNotFound: true,\r\n                            projListVisible: false,\r\n                            projDetailsVisible: false,\r\n                            shouldShowProjections: false}\r\n                        })\r\n                }\r\n\r\n            }).catch(err => {alert(err)});\r\n      }\r\n      \r\n     function computeWorkingDaysBetweenTwoDays(startDate, endDate) {\r\n      \r\n      // Validate input\r\n        if (endDate < startDate) {\r\n          return 0;\r\n        }\r\n      \r\n      // Calculate days between dates\r\n        var millisecondsPerDay = 86400 * 1000; // Day in milliseconds\r\n        startDate.setHours(0, 0, 0, 1);  // Start just after midnight\r\n        endDate.setHours(23, 59, 59, 999);  // End just before midnight\r\n        var diff = endDate - startDate;  // Milliseconds between datetime objects    \r\n        var days = Math.ceil(diff / millisecondsPerDay);\r\n      \r\n        // Subtract two weekend days for every week in between\r\n        var weeks = Math.floor(days / 7);\r\n        days -= weeks * 2;\r\n      \r\n        // Handle special cases\r\n        var startDay = startDate.getDay();\r\n        var endDay = endDate.getDay();\r\n          \r\n        // Remove weekend not previously removed.   \r\n        if (startDay - endDay > 1) {\r\n          days -= 2;\r\n        }\r\n        // Remove start day if span starts on Sunday but ends before Saturday\r\n        if (startDay == 0 && endDay != 6) {\r\n          days--;  \r\n        }\r\n        // Remove end day if span ends on Saturday but starts after Sunday\r\n        if (endDay == 6 && startDay != 0) {\r\n          days--;\r\n        }\r\n\r\n        /* Here is the code */\r\n        listofholidays.forEach(day => {\r\n            //console.log(day + \" -- \" + startDate + \" -- \" + endDate)\r\n          if ((day >= startDate) && (day <= endDate)) {\r\n              days--;\r\n          }\r\n        });\r\n        return days;\r\n     }\r\n\r\n      function showProjections() {\r\n          \r\n        //const url = \"http://localhost:7071/api/search\";\r\n        const url = \"https://projectionsazurefunctions.azurewebsites.net/api/GetHolidays?code=IGZG4SdEVqbHWYhV32asIb8junLY3IttJDVB4KjCjL3aNGyr0L1rOg==\"\r\n        fetch(url, {\r\n            method : \"GET\"\r\n          }).then(response => response.json()\r\n          ).then(holidays => {\r\n              console.log(holidays);\r\n              holidays.map(holiday =>  \r\n                {\r\n                    listofholidays.push(new Date(Date.parse(holiday.holidayDate)))\r\n                });\r\n              console.log(listofholidays)\r\n\r\n              var total = 0;\r\n              var billDetails = [];\r\n              var billMap = new Map();\r\n\r\n              state.resources.map(res => {\r\n\r\n                var billing = res.billing\r\n                 // var a = new Date(res.resourceProjStartDate);\r\n                  //var b = state.endDate;\r\n                  var start = new Date(res.resourceProjStartDate);\r\n                  var end = new Date(start.getFullYear(), start.getMonth() + 1, 0);\r\n                  console.log(start + \" - \" + end + \" - \" + billing)\r\n                  end = (end > state.endDate) ? state.endDate : end;\r\n                  var year = start.getFullYear();\r\n                  while (end >= start) {\r\n                      var diffDays = computeWorkingDaysBetweenTwoDays(start, end);\r\n                      total += billing * diffDays;\r\n\r\n                      var key = monthNames[start.getMonth()] + \" \" + start.getFullYear();\r\n                      console.log(key + \"-\" + billMap.get(key));\r\n                      if(!billMap.has(key))\r\n                      {\r\n                        billMap.set(key, 0);\r\n                      }\r\n                      billMap.set(key, billMap.get(key) + (billing * diffDays));\r\n                      \r\n\r\n                      var month = start.getMonth() == 11 ? -1 : start.getMonth();\r\n                      year = start.getMonth() == 11 ? year + 1 : year;\r\n                      start = new Date(year, month + 1, 1);\r\n                      end = new Date(year, start.getMonth() + 1, 0);\r\n                      end = (end >= state.endDate) ? state.endDate : end;\r\n                      console.log(start + \" - \" + end + \" - \" + billing)\r\n                  }\r\n              })\r\n\r\n      \r\n             setState(prevstate => {\r\n                  return{...prevstate,totalBill : total,\r\n                      shouldShowProjections: true,}\r\n                  \r\n              })\r\n              \r\n              for (const [key, value] of billMap) {\r\n                billDetails.push(\r\n                    {\r\n                        \"Month\": key,\r\n                        \"Monthly Bill\": \"$\" + value\r\n                    },\r\n                )\r\n                console.log(`${key}: ${value}`);\r\n              }\r\n\r\n             \r\n            //   billMap.map(monthlyBill => {\r\n            //       billDetails.push(\r\n            //           {\r\n            //               \"Month\": monthlyBill,\r\n            //               \"Monthly Bill\": \"$\" + (billing * diffDays)\r\n            //           },\r\n            //       )\r\n            //   })\r\n\r\n              setBillingDetails(billDetails);\r\n          });\r\n\r\n      }\r\n\r\n        return(\r\n            <div className=\"SearchSection\">\r\n                <Label>Search for the Project ID</Label>\r\n                <SearchBox\r\n                    styles={searchBoxStyles}\r\n                    placeholder=\"Enter the Project name\"\r\n                    onSearch={onSubmit}\r\n                />\r\n                \r\n                <If condition={state.projNotFound}>\r\n                    <h3> Project not found! </h3>\r\n                </If>\r\n                \r\n                <If condition={state.projListVisible}>\r\n                <Projects projectlist={projlist}/>\r\n                </If>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default Search;"]},"metadata":{},"sourceType":"module"}